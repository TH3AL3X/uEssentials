<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<doc>
  <members>
    <assembly>
      <name>UnityEngine.Physics2DModule</name>
    </assembly>
    <member name="T:UnityEngine.AnchoredJoint2D">
      <summary>
        <para>Parent class for all joints that have anchor points.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnchoredJoint2D.anchor">
      <summary>
        <para>The joint's anchor point on the object that has the joint component.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnchoredJoint2D.autoConfigureConnectedAnchor">
      <summary>
        <para>Should the connectedAnchor be calculated automatically?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnchoredJoint2D.connectedAnchor">
      <summary>
        <para>The joint's anchor point on the second object (ie, the one which doesn't have the joint component).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AreaEffector2D">
      <summary>
        <para>Applies forces within an area.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AreaEffector2D.angularDrag">
      <summary>
        <para>The angular drag to apply to rigid-bodies.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AreaEffector2D.drag">
      <summary>
        <para>The linear drag to apply to rigid-bodies.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AreaEffector2D.forceAngle">
      <summary>
        <para>The angle of the force to be applied.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AreaEffector2D.forceMagnitude">
      <summary>
        <para>The magnitude of the force to be applied.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AreaEffector2D.forceTarget">
      <summary>
        <para>The target for where the effector applies any force.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AreaEffector2D.forceVariation">
      <summary>
        <para>The variation of the magnitude of the force to be applied.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AreaEffector2D.useGlobalAngle">
      <summary>
        <para>Should the forceAngle use global space?</para>
      </summary>
    </member>
    <member name="T:UnityEngine.BoxCollider2D">
      <summary>
        <para>Collider for 2D physics representing an axis-aligned rectangle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoxCollider2D.autoTiling">
      <summary>
        <para>Determines whether the BoxCollider2D's shape is automatically updated based on a SpriteRenderer's tiling properties.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoxCollider2D.center">
      <summary>
        <para>The center point of the collider in local space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoxCollider2D.edgeRadius">
      <summary>
        <para>Controls the radius of all edges created by the collider.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoxCollider2D.size">
      <summary>
        <para>The width and height of the rectangle.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.BuoyancyEffector2D">
      <summary>
        <para>Applies forces to simulate buoyancy, fluid-flow and fluid drag.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BuoyancyEffector2D.angularDrag">
      <summary>
        <para>A force applied to slow angular movement of any Collider2D in contact with the effector.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BuoyancyEffector2D.density">
      <summary>
        <para>The density of the fluid used to calculate the buoyancy forces.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BuoyancyEffector2D.flowAngle">
      <summary>
        <para>The angle of the force used to similate fluid flow.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BuoyancyEffector2D.flowMagnitude">
      <summary>
        <para>The magnitude of the force used to similate fluid flow.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BuoyancyEffector2D.flowVariation">
      <summary>
        <para>The random variation of the force used to similate fluid flow.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BuoyancyEffector2D.linearDrag">
      <summary>
        <para>A force applied to slow linear movement of any Collider2D in contact with the effector.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BuoyancyEffector2D.surfaceLevel">
      <summary>
        <para>Defines an arbitrary horizontal line that represents the fluid surface level.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CapsuleCollider2D">
      <summary>
        <para>A capsule-shaped primitive collider.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CapsuleCollider2D.direction">
      <summary>
        <para>The direction that the capsule sides can extend.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CapsuleCollider2D.size">
      <summary>
        <para>The width and height of the capsule area.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CapsuleDirection2D">
      <summary>
        <para>The direction that the capsule sides can extend.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CapsuleDirection2D.Horizontal">
      <summary>
        <para>The capsule sides extend horizontally.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CapsuleDirection2D.Vertical">
      <summary>
        <para>The capsule sides extend vertically.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CircleCollider2D">
      <summary>
        <para>Collider for 2D physics representing an circle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CircleCollider2D.center">
      <summary>
        <para>The center point of the collider in local space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CircleCollider2D.radius">
      <summary>
        <para>Radius of the circle.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Collider2D">
      <summary>
        <para>Parent class for collider types used with 2D gameplay.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collider2D.attachedRigidbody">
      <summary>
        <para>The Rigidbody2D attached to the Collider2D.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collider2D.bounciness">
      <summary>
        <para>Get the bounciness used by the collider.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collider2D.bounds">
      <summary>
        <para>The world space bounding area of the collider.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collider2D.composite">
      <summary>
        <para>Get the CompositeCollider2D that is available to be attached to the collider.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collider2D.density">
      <summary>
        <para>The density of the collider used to calculate its mass (when auto mass is enabled).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collider2D.errorState">
      <summary>
        <para>The error state that indicates the state of the physics shapes the 2D Collider tried to create. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collider2D.friction">
      <summary>
        <para>Get the friction used by the collider.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collider2D.isTrigger">
      <summary>
        <para>Is this collider configured as a trigger?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collider2D.offset">
      <summary>
        <para>The local offset of the collider geometry.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collider2D.shapeCount">
      <summary>
        <para>The number of active PhysicsShape2D the Collider2D is currently using.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collider2D.sharedMaterial">
      <summary>
        <para>The PhysicsMaterial2D that is applied to this collider.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collider2D.usedByComposite">
      <summary>
        <para>Sets whether the Collider will be used or not used by a CompositeCollider2D.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collider2D.usedByEffector">
      <summary>
        <para>Whether the collider is used by an attached effector or not.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Collider2D.Cast(UnityEngine.Vector2,UnityEngine.RaycastHit2D[],System.Single,System.Boolean)">
      <summary>
        <para>Casts the Collider shape into the Scene starting at the Collider position ignoring the Collider itself.</para>
      </summary>
      <param name="direction">Vector representing the direction to cast the shape.</param>
      <param name="results">Array to receive results.</param>
      <param name="distance">Maximum distance over which to cast the shape.</param>
      <param name="ignoreSiblingColliders">Determines whether the cast should ignore Colliders attached to the same Rigidbody2D (known as sibling Colliders).</param>
      <returns>
        <para>The number of results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Collider2D.Cast(UnityEngine.Vector2,UnityEngine.ContactFilter2D,UnityEngine.RaycastHit2D[],System.Single,System.Boolean)">
      <summary>
        <para>Casts the Collider shape into the Scene starting at the Collider position ignoring the Collider itself.</para>
      </summary>
      <param name="direction">Vector representing the direction to cast the shape.</param>
      <param name="contactFilter">Filter results defined by the contact filter.</param>
      <param name="results">Array to receive results.</param>
      <param name="distance">Maximum distance over which to cast the shape.</param>
      <param name="ignoreSiblingColliders">Determines whether the cast should ignore Colliders attached to the same Rigidbody2D (known as sibling Colliders).</param>
      <returns>
        <para>The number of results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Collider2D.Cast(UnityEngine.Vector2,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.RaycastHit2D&gt;,System.Single,System.Boolean)">
      <summary>
        <para>Casts the Collider shape into the Scene starting at the Collider position ignoring the Collider itself.</para>
      </summary>
      <param name="direction">Vector representing the direction to cast the shape.</param>
      <param name="contactFilter">Filter results defined by the contact filter.</param>
      <param name="results">List to receive results.</param>
      <param name="distance">Maximum distance over which to cast the shape.</param>
      <param name="ignoreSiblingColliders">Determines whether the cast should ignore Colliders attached to the same Rigidbody2D (known as sibling Colliders).</param>
      <returns>
        <para>The number of results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Collider2D.ClosestPoint(UnityEngine.Vector2)">
      <summary>
        <para>Returns a point on the perimeter of this Collider that is closest to the specified position.</para>
      </summary>
      <param name="position">The position from which to find the closest point on this Collider.</param>
      <returns>
        <para>A point on the perimeter of this Collider that is closest to the specified position.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Collider2D.CreateMesh(System.Boolean,System.Boolean)">
      <summary>
        <para>Creates a planar Mesh that is identical to the area defined by the Collider2D geometry.</para>
      </summary>
      <param name="useBodyPosition">Should the mesh be transformed by the position of the attached Rigidbody2D?</param>
      <param name="useBodyRotation">Should the mesh be transformed by the rotation of the attached Rigidbody2D?</param>
      <returns>
        <para>The planar Mesh created that matches the collider geometry or NULL if no Mesh could be created.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Collider2D.Distance(UnityEngine.Collider2D)">
      <summary>
        <para>Calculates the minimum separation of this collider against another collider.</para>
      </summary>
      <param name="collider">A collider used to calculate the minimum separation against this collider.</param>
      <returns>
        <para>The minimum separation of collider and this collider.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Collider2D.GetContacts(UnityEngine.ContactPoint2D[])">
      <summary>
        <para>Retrieves all contact points for this Collider.</para>
      </summary>
      <param name="contacts">An array of ContactPoint2D used to receive the results.</param>
      <returns>
        <para>Returns the number of contacts placed in the contacts array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Collider2D.GetContacts(UnityEngine.Collider2D[])">
      <summary>
        <para>Retrieves all colliders in contact with this Collider.</para>
      </summary>
      <param name="colliders">An array of Collider2D used to receive the results.</param>
      <returns>
        <para>Returns the number of contacts placed in the colliders array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Collider2D.GetContacts(UnityEngine.ContactFilter2D,UnityEngine.ContactPoint2D[])">
      <summary>
        <para>Retrieves all contact points for this Collider, with the results filtered by the contactFilter.</para>
      </summary>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="contacts">An array of ContactPoint2D used to receive the results.</param>
      <returns>
        <para>Returns the number of contacts placed in the contacts array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Collider2D.GetContacts(UnityEngine.ContactFilter2D,UnityEngine.Collider2D[])">
      <summary>
        <para>Retrieves all colliders in contact with this Collider, with the results filtered by the contactFilter.</para>
      </summary>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="colliders">An array of Collider2D used to receive the results.</param>
      <returns>
        <para>Returns the number of colliders placed in the colliders array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Collider2D.GetContacts(System.Collections.Generic.List`1&lt;UnityEngine.ContactPoint2D&gt;)">
      <summary>
        <para>Retrieves all contact points for this Collider.</para>
      </summary>
      <param name="contacts">A list of ContactPoint2D used to receive the results.</param>
      <returns>
        <para>Returns the number of contacts placed in the contacts list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Collider2D.GetContacts(System.Collections.Generic.List`1&lt;UnityEngine.Collider2D&gt;)">
      <summary>
        <para>Retrieves all colliders in contact with this Collider.</para>
      </summary>
      <param name="colliders">A list of Collider2D used to receive the results.</param>
      <returns>
        <para>Returns the number of contacts placed in the colliders list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Collider2D.GetContacts(UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.ContactPoint2D&gt;)">
      <summary>
        <para>Retrieves all contact points for this Collider, with the results filtered by the contactFilter.</para>
      </summary>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="contacts">A list of ContactPoint2D used to receive the results.</param>
      <returns>
        <para>Returns the number of contacts placed in the contacts list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Collider2D.GetContacts(UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.Collider2D&gt;)">
      <summary>
        <para>Retrieves all colliders in contact with this Collider, with the results filtered by the contactFilter.</para>
      </summary>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="colliders">A list of Collider2D used to receive the results.</param>
      <returns>
        <para>Returns the number of contacts placed in the colliders list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Collider2D.GetShapeHash">
      <summary>
        <para>Generates a simple hash value based upon the geometry of the Collider2D.</para>
      </summary>
      <returns>
        <para>A hash value that uniquely identifies the configured geometry of the Collider2D.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Collider2D.GetShapes(UnityEngine.PhysicsShapeGroup2D)">
      <summary>
        <para>Gets all the PhysicsShape2D used by the Collider2D.</para>
      </summary>
      <param name="physicsShapeGroup">The PhysicsShapeGroup2D to store the retrieved PhysicsShape2D in.</param>
      <returns>
        <para>Returns the number of PhysicsShape2D retrieved from the Collider2D.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Collider2D.GetShapes(UnityEngine.PhysicsShapeGroup2D,System.Int32,System.Int32)">
      <summary>
        <para>Gets the specified range of the PhysicsShape2D used by the Collider2D.</para>
      </summary>
      <param name="physicsShapeGroup">The PhysicsShapeGroup2D to store the retrieved PhysicsShape2D in.</param>
      <param name="shapeIndex">The index of the first shape to retrieve. This should be in the range of 0 to Collider2D.shapeCount-1.</param>
      <param name="shapeCount">The number of shapes to retrieve. The shapeIndex + shapeCount must be less than or equal to Collider2D.shapeCount.</param>
      <returns>
        <para>Returns the number of PhysicsShape2D retrieved from the Collider2D. In all cases this should be the same number as shapeCount .</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Collider2D.IsTouching(UnityEngine.Collider2D)">
      <summary>
        <para>Check whether this collider is touching the collider or not.</para>
      </summary>
      <param name="collider">The collider to check if it is touching this collider.</param>
      <returns>
        <para>Whether this collider is touching the collider or not.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Collider2D.IsTouching(UnityEngine.Collider2D,UnityEngine.ContactFilter2D)">
      <summary>
        <para>Check whether this collider is touching the collider or not with the results filtered by the contactFilter.</para>
      </summary>
      <param name="collider">The collider to check if it is touching this collider.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <returns>
        <para>Whether this collider is touching the collider or not.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Collider2D.IsTouching(UnityEngine.ContactFilter2D)">
      <summary>
        <para>Check whether this collider is touching other colliders or not with the results filtered by the contactFilter.</para>
      </summary>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <returns>
        <para>Whether this collider is touching the collider or not.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Collider2D.IsTouchingLayers(System.Int32)">
      <summary>
        <para>Checks whether this collider is touching any colliders on the specified layerMask or not.</para>
      </summary>
      <param name="layerMask">Any colliders on any of these layers count as touching.</param>
      <returns>
        <para>Whether this collider is touching any collider on the specified layerMask or not.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Collider2D.OverlapCollider(UnityEngine.ContactFilter2D,UnityEngine.Collider2D[])">
      <summary>
        <para>Get a list of all colliders that overlap this collider.</para>
      </summary>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Collider2D.OverlapCollider(UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.Collider2D&gt;)">
      <summary>
        <para>Get a list of all Colliders that overlap this Collider.</para>
      </summary>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.</param>
      <param name="results">The list to receive results.</param>
      <returns>
        <para>Returns the number of results placed in the results list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Collider2D.OverlapPoint(UnityEngine.Vector2)">
      <summary>
        <para>Check if a collider overlaps a point in space.</para>
      </summary>
      <param name="point">A point in world space.</param>
      <returns>
        <para>Does point overlap the collider?</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Collider2D.Raycast(UnityEngine.Vector2,UnityEngine.RaycastHit2D[],System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Casts a ray into the Scene that starts at the Collider position and ignores the Collider itself.</para>
      </summary>
      <param name="direction">Vector representing the direction of the ray.</param>
      <param name="results">Array to receive results.</param>
      <param name="distance">Maximum distance over which to cast the ray.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
      <param name="contactFilter">Filter results defined by the contact filter.</param>
      <returns>
        <para>The number of results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Collider2D.Raycast(UnityEngine.Vector2,UnityEngine.ContactFilter2D,UnityEngine.RaycastHit2D[],System.Single)">
      <summary>
        <para>Casts a ray into the Scene that starts at the Collider position and ignores the Collider itself.</para>
      </summary>
      <param name="direction">Vector representing the direction of the ray.</param>
      <param name="results">Array to receive results.</param>
      <param name="distance">Maximum distance over which to cast the ray.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
      <param name="contactFilter">Filter results defined by the contact filter.</param>
      <returns>
        <para>The number of results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Collider2D.Raycast(UnityEngine.Vector2,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.RaycastHit2D&gt;,System.Single)">
      <summary>
        <para>Casts a ray into the Scene that starts at the Collider position and ignores the Collider itself.</para>
      </summary>
      <param name="direction">Vector representing the direction of the ray.</param>
      <param name="contactFilter">Filter results defined by the contact filter.</param>
      <param name="results">List to receive results.</param>
      <param name="distance">Maximum distance over which to cast the ray.</param>
      <returns>
        <para>The number of results returned.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.ColliderDistance2D">
      <summary>
        <para>Represents the separation or overlap of two Collider2D.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ColliderDistance2D.distance">
      <summary>
        <para>Gets the distance between two colliders.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ColliderDistance2D.isOverlapped">
      <summary>
        <para>Gets whether the distance represents an overlap or not.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ColliderDistance2D.isValid">
      <summary>
        <para>Gets whether the distance is valid or not.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ColliderDistance2D.normal">
      <summary>
        <para>A normalized vector that points from pointB to pointA.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ColliderDistance2D.pointA">
      <summary>
        <para>A point on a Collider2D that is a specific distance away from pointB.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ColliderDistance2D.pointB">
      <summary>
        <para>A point on a Collider2D that is a specific distance away from pointA.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ColliderErrorState2D">
      <summary>
        <para>Indicates what (if any) error was encountered when creating a 2D Collider.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ColliderErrorState2D.None">
      <summary>
        <para>Indicates that no error was encountered, therefore the 2D Collider was created successfully.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ColliderErrorState2D.NoShapes">
      <summary>
        <para>Indicates that no physics shapes were created by the 2D Collider because the state of 2D Collider resulted in vertices too close or an area that is too small for the physics engine to handle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ColliderErrorState2D.RemovedShapes">
      <summary>
        <para>Indicates that some physics shapes were not created by the 2D Collider because the state of 2D Collider resulted in vertices too close or an area that is too small for the physics engine to handle.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Collision2D">
      <summary>
        <para>Collision details returned by 2D physics callback functions.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collision2D.collider">
      <summary>
        <para>The incoming Collider2D involved in the collision with the otherCollider.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collision2D.contactCount">
      <summary>
        <para>Gets the number of contacts for this collision.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collision2D.contacts">
      <summary>
        <para>The specific points of contact with the incoming Collider2D. You should avoid using this as it produces memory garbage. Use GetContact or GetContacts instead.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collision2D.enabled">
      <summary>
        <para>Indicates whether the collision response or reaction is enabled or disabled.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collision2D.gameObject">
      <summary>
        <para>The incoming GameObject involved in the collision.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collision2D.otherCollider">
      <summary>
        <para>The other Collider2D involved in the collision with the collider.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collision2D.otherRigidbody">
      <summary>
        <para>The other Rigidbody2D involved in the collision with the rigidbody.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collision2D.relativeVelocity">
      <summary>
        <para>The relative linear velocity of the two colliding objects (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collision2D.rigidbody">
      <summary>
        <para>The incoming Rigidbody2D involved in the collision with the otherRigidbody.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collision2D.transform">
      <summary>
        <para>The Transform of the incoming object involved in the collision.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Collision2D.GetContact(System.Int32)">
      <summary>
        <para>Gets the contact point at the specified index.</para>
      </summary>
      <param name="index">The index of the contact to retrieve.</param>
      <returns>
        <para>The contact at the specified index.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Collision2D.GetContacts(UnityEngine.ContactPoint2D[])">
      <summary>
        <para>Retrieves all contact points for contacts between collider and otherCollider.</para>
      </summary>
      <param name="contacts">An array of ContactPoint2D used to receive the results.</param>
      <returns>
        <para>Returns the number of contacts placed in the contacts array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Collision2D.GetContacts(System.Collections.Generic.List`1&lt;UnityEngine.ContactPoint2D&gt;)">
      <summary>
        <para>Retrieves all contact points for contacts between collider and otherCollider.</para>
      </summary>
      <param name="contacts">A list of ContactPoint2D used to receive the results.</param>
      <returns>
        <para>Returns the number of contacts placed in the contacts list.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.CollisionDetectionMode2D">
      <summary>
        <para>Controls how collisions are detected when a Rigidbody2D moves.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CollisionDetectionMode2D.Continuous">
      <summary>
        <para>Ensures that all collisions are detected when a Rigidbody2D moves.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CollisionDetectionMode2D.Discrete">
      <summary>
        <para>When a Rigidbody2D moves, only collisions at the new position are detected.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CollisionDetectionMode2D.None">
      <summary>
        <para>This mode is obsolete.  You should use Discrete mode.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CompositeCollider2D">
      <summary>
        <para>A Collider that can merge other Colliders together.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CompositeCollider2D.edgeRadius">
      <summary>
        <para>Controls the radius of all edges created by the Collider.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CompositeCollider2D.generationType">
      <summary>
        <para>Specifies when to generate the Composite Collider geometry.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CompositeCollider2D.geometryType">
      <summary>
        <para>Specifies the type of geometry the Composite Collider should generate.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CompositeCollider2D.offsetDistance">
      <summary>
        <para>Vertices are offset by this distance when compositing multiple physic shapes. Any vertices between shapes within this distance are combined.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CompositeCollider2D.pathCount">
      <summary>
        <para>The number of paths in the Collider.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CompositeCollider2D.pointCount">
      <summary>
        <para>Gets the total number of points in all the paths within the Collider.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CompositeCollider2D.vertexDistance">
      <summary>
        <para>Controls the minimum distance allowed between generated vertices.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.CompositeCollider2D.GenerateGeometry">
      <summary>
        <para>Regenerates the Composite Collider geometry.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CompositeCollider2D.GenerationType">
      <summary>
        <para>Specifies when to generate the Composite Collider geometry.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CompositeCollider2D.GenerationType.Manual">
      <summary>
        <para>Sets the Composite Collider geometry to not automatically update when a Collider used by the Composite Collider changes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CompositeCollider2D.GenerationType.Synchronous">
      <summary>
        <para>Sets the Composite Collider geometry to update synchronously immediately when a Collider used by the Composite Collider changes.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CompositeCollider2D.GeometryType">
      <summary>
        <para>Specifies the type of geometry the Composite Collider generates.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CompositeCollider2D.GeometryType.Outlines">
      <summary>
        <para>Sets the Composite Collider 2D to generate closed outlines for the merged collider geometry consisting of only edges.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CompositeCollider2D.GeometryType.Polygons">
      <summary>
        <para>Sets the Composite Collider 2D to generate closed outlines for the merged collider geometry consisting of convex polygon shapes.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.CompositeCollider2D.GetPath(System.Int32,UnityEngine.Vector2[])">
      <summary>
        <para>Gets a path from the Collider by its index.</para>
      </summary>
      <param name="index">The index of the path from 0 to pathCount minus 1.</param>
      <param name="points">An ordered array of the vertices (points) in the selected path.</param>
      <returns>
        <para>Returns the number of points placed in the points array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.CompositeCollider2D.GetPath(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Vector2&gt;)">
      <summary>
        <para>Gets a path from the Collider by its index.</para>
      </summary>
      <param name="index">The index of the path from 0 to pathCount minus 1.</param>
      <param name="points">An ordered list of the vertices (points) in the selected path.</param>
      <returns>
        <para>Returns the number of points placed in the points list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.CompositeCollider2D.GetPathPointCount(System.Int32)">
      <summary>
        <para>Gets the number of points in the specified path from the Collider by its index.</para>
      </summary>
      <param name="index">The index of the path from 0 to pathCount minus 1.</param>
      <returns>
        <para>Returns the number of points in the path specified by index.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.ConstantForce2D">
      <summary>
        <para>Applies both linear and angular (torque) forces continuously to the rigidbody each physics update.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConstantForce2D.force">
      <summary>
        <para>The linear force applied to the rigidbody each physics update.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConstantForce2D.relativeForce">
      <summary>
        <para>The linear force, relative to the rigid-body coordinate system, applied each physics update.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConstantForce2D.torque">
      <summary>
        <para>The torque applied to the rigidbody each physics update.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ContactFilter2D">
      <summary>
        <para>A set of parameters for filtering contact results. Define the angle by referring to their position in world space, where 0 degrees is parallel to the positive x-axis, 90 degrees is parallel to the positive y-axis, 180 degrees is parallel to the negative x-axis, and 270 degrees is parallel to the negative y-axis.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ContactFilter2D.isFiltering">
      <summary>
        <para>Given the current state of the contact filter, determine whether it would filter anything.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ContactFilter2D.layerMask">
      <summary>
        <para>Sets the contact filter to filter the results that only include Collider2D on the layers defined by the layer mask.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ContactFilter2D.maxDepth">
      <summary>
        <para>Sets the contact filter to filter the results to only include Collider2D with a Z coordinate (depth) less than this value.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ContactFilter2D.maxNormalAngle">
      <summary>
        <para>Sets the contact filter to filter the results to only include contacts with collision normal angles that are less than this angle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ContactFilter2D.minDepth">
      <summary>
        <para>Sets the contact filter to filter the results to only include Collider2D with a Z coordinate (depth) greater than this value.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ContactFilter2D.minNormalAngle">
      <summary>
        <para>Sets the contact filter to filter the results to only include contacts with collision normal angles that are greater than this angle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ContactFilter2D.useDepth">
      <summary>
        <para>Sets the contact filter to filter the results by depth using minDepth and maxDepth.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ContactFilter2D.useLayerMask">
      <summary>
        <para>Sets the contact filter to filter results by layer mask.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ContactFilter2D.useNormalAngle">
      <summary>
        <para>Sets the contact filter to filter the results by the collision's normal angle using minNormalAngle and maxNormalAngle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ContactFilter2D.useOutsideDepth">
      <summary>
        <para>Sets the contact filter to filter within the minDepth and maxDepth range, or outside that range.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ContactFilter2D.useOutsideNormalAngle">
      <summary>
        <para>Sets the contact filter to filter within the minNormalAngle and maxNormalAngle range, or outside that range.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ContactFilter2D.useTriggers">
      <summary>
        <para>Sets to filter contact results based on trigger collider involvement.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ContactFilter2D.ClearDepth">
      <summary>
        <para>Turns off depth filtering by setting useDepth to false.  The associated values of minDepth and maxDepth are not changed.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ContactFilter2D.ClearLayerMask">
      <summary>
        <para>Turns off layer mask filtering by setting useLayerMask to false.  The associated value of layerMask is not changed.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ContactFilter2D.ClearNormalAngle">
      <summary>
        <para>Turns off normal angle filtering by setting useNormalAngle to false. The associated values of minNormalAngle and maxNormalAngle are not changed.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ContactFilter2D.IsFilteringDepth(UnityEngine.GameObject)">
      <summary>
        <para>Checks if the Transform for obj is within the depth range to be filtered.</para>
      </summary>
      <param name="obj">The GameObject used to check the z-position (depth) of Transform.position.</param>
      <returns>
        <para>Returns true when obj is excluded by the filter and false if otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.ContactFilter2D.IsFilteringLayerMask(UnityEngine.GameObject)">
      <summary>
        <para>Checks if the GameObject.layer for obj is included in the layerMask to be filtered.</para>
      </summary>
      <param name="obj">The GameObject used to check the GameObject.layer.</param>
      <returns>
        <para>Returns true when obj is excluded by the filter and false if otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.ContactFilter2D.IsFilteringNormalAngle(UnityEngine.Vector2)">
      <summary>
        <para>Checks if the angle of normal is within the normal angle range to be filtered.</para>
      </summary>
      <param name="normal">The normal used to calculate an angle.</param>
      <returns>
        <para>Returns true when normal is excluded by the filter and false if otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.ContactFilter2D.IsFilteringNormalAngle(System.Single)">
      <summary>
        <para>Checks if the angle is within the normal angle range to be filtered.</para>
      </summary>
      <param name="angle">The angle used for comparison in the filter.</param>
      <returns>
        <para>Returns true when angle is excluded by the filter and false if otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.ContactFilter2D.IsFilteringTrigger(UnityEngine.Collider2D)">
      <summary>
        <para>Checks if the collider is a trigger and should be filtered by the useTriggers to be filtered.</para>
      </summary>
      <param name="collider">The Collider2D used to check for a trigger.</param>
      <returns>
        <para>Returns true when collider is excluded by the filter and false if otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.ContactFilter2D.NoFilter">
      <summary>
        <para>Sets the contact filter to not filter any ContactPoint2D.</para>
      </summary>
      <returns>
        <para>A copy of the contact filter set to not filter any ContactPoint2D.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.ContactFilter2D.SetDepth(System.Single,System.Single)">
      <summary>
        <para>Sets the minDepth and maxDepth filter properties and turns on depth filtering by setting useDepth to true.</para>
      </summary>
      <param name="minDepth">The value used to set minDepth.</param>
      <param name="maxDepth">The value used to set maxDepth.</param>
    </member>
    <member name="M:UnityEngine.ContactFilter2D.SetLayerMask(UnityEngine.LayerMask)">
      <summary>
        <para>Sets the layerMask filter property using the layerMask parameter provided and also enables layer mask filtering by setting useLayerMask to true.</para>
      </summary>
      <param name="layerMask">The value used to set the layerMask.</param>
    </member>
    <member name="M:UnityEngine.ContactFilter2D.SetNormalAngle(System.Single,System.Single)">
      <summary>
        <para>Sets the minNormalAngle and maxNormalAngle filter properties and turns on normal angle filtering by setting useNormalAngle to true.</para>
      </summary>
      <param name="minNormalAngle">The value used to set the minNormalAngle.</param>
      <param name="maxNormalAngle">The value used to set the maxNormalAngle.</param>
    </member>
    <member name="T:UnityEngine.ContactPoint2D">
      <summary>
        <para>Details about a specific point of contact involved in a 2D physics collision.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ContactPoint2D.collider">
      <summary>
        <para>The incoming Collider2D involved in the collision with the otherCollider.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ContactPoint2D.enabled">
      <summary>
        <para>Indicates whether the collision response or reaction is enabled or disabled.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ContactPoint2D.normal">
      <summary>
        <para>Surface normal at the contact point.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ContactPoint2D.normalImpulse">
      <summary>
        <para>Gets the impulse applied at the contact point along the ContactPoint2D.normal.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ContactPoint2D.otherCollider">
      <summary>
        <para>The other Collider2D involved in the collision with the collider.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ContactPoint2D.otherRigidbody">
      <summary>
        <para>The other Rigidbody2D involved in the collision with the rigidbody.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ContactPoint2D.point">
      <summary>
        <para>The point of contact between the two colliders in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ContactPoint2D.relativeVelocity">
      <summary>
        <para>Gets the relative velocity of the two colliders at the contact point (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ContactPoint2D.rigidbody">
      <summary>
        <para>The incoming Rigidbody2D involved in the collision with the otherRigidbody.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ContactPoint2D.separation">
      <summary>
        <para>Gets the distance between the colliders at the contact point.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ContactPoint2D.tangentImpulse">
      <summary>
        <para>Gets the impulse applied at the contact point which is perpendicular to the ContactPoint2D.normal.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CustomCollider2D">
      <summary>
        <para>Represents a Collider2D that is configured by assigning PhysicsShape2D geometry to it via a PhysicsShapeGroup2D.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CustomCollider2D.customShapeCount">
      <summary>
        <para>The total number of custom PhysicsShape2D assigned to the Collider. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CustomCollider2D.customVertexCount">
      <summary>
        <para>The total number of Vector2|vertices used by the Collider. (Read Only)</para>
      </summary>
    </member>
    <member name="M:UnityEngine.CustomCollider2D.ClearCustomShapes">
      <summary>
        <para>Deletes all the shapes and associated vertices for those shapes from the Collider.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.CustomCollider2D.ClearCustomShapes(System.Int32,System.Int32)">
      <summary>
        <para>Deletes a specific number of shapes defined by shapeCount starting at shapeIndex along with all associated vertices those shapes use.</para>
      </summary>
      <param name="shapeIndex">The index of the shape stored in the Collider.</param>
      <param name="shapeCount">The number of shapes to delete starting at the specified index.</param>
    </member>
    <member name="M:UnityEngine.CustomCollider2D.GetCustomShapes(UnityEngine.PhysicsShapeGroup2D)">
      <summary>
        <para>Gets all the physics shapes and vertices in the Collider and places them in the specified PhysicsShapeGroup2D.</para>
      </summary>
      <param name="physicsShapeGroup">The physics shape group that will receive all the PhysicsShape2D|physics shapes and Vector2|vertices from the Collider.</param>
      <returns>
        <para>Returns the total number of PhysicsShape2D|physics shapes placed in the specified physicsShapeGroup.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.CustomCollider2D.GetCustomShapes(UnityEngine.PhysicsShapeGroup2D,System.Int32,System.Int32)">
      <summary>
        <para>Gets a specified number of physics shapes defined byshapeCount starting at shapeIndex along with all associated vertices those shapes use and places them in the specified PhysicsShapeGroup2D.</para>
      </summary>
      <param name="physicsShapeGroup">The physics shape group that will receive the PhysicsShape2D|physics shapes and Vector2|vertices from the Collider.</param>
      <param name="shapeIndex">The shape index within the Collider to start retrieving shapes from.</param>
      <param name="shapeCount">The total number of shapes starting at the shapeIndex to retrieve.</param>
      <returns>
        <para>The total number of PhysicsShape2D|physics shapes placed in the specified physicsShapeGroup.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.CustomCollider2D.GetCustomShapes(Unity.Collections.NativeArray`1&lt;UnityEngine.PhysicsShape2D&gt;,Unity.Collections.NativeArray`1&lt;UnityEngine.Vector2&gt;)">
      <summary>
        <para>Gets all the physics shapes and vertices in the Collider and places them in the specified arrays.</para>
      </summary>
      <param name="shapes">The array that will be populated with a copy of all the shapes in the PhysicsShapeGroup2D.</param>
      <param name="vertices">The array that will be populated with a copy of all the vertices in the PhysicsShapeGroup2D.</param>
      <returns>
        <para>Returns the total number of PhysicsShape2D|physics shapes placed in the specified arrays.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.CustomCollider2D.SetCustomShape(UnityEngine.PhysicsShapeGroup2D,System.Int32,System.Int32)">
      <summary>
        <para>Sets a single shape and all associated shape vertices from the specified physicsShapeGroup into the Collider.</para>
      </summary>
      <param name="physicsShapeGroup">The PhysicsShapeGroup2D to use as the source of shapes and vertices.</param>
      <param name="srcShapeIndex">The source shape index within the physicsShapeGroup used to assign to the Collider.</param>
      <param name="dstShapeIndex">The destination shape index within the Collider to copy the source shape to.</param>
    </member>
    <member name="M:UnityEngine.CustomCollider2D.SetCustomShape(Unity.Collections.NativeArray`1&lt;UnityEngine.PhysicsShape2D&gt;,Unity.Collections.NativeArray`1&lt;UnityEngine.Vector2&gt;,System.Int32,System.Int32)">
      <summary>
        <para>Sets a single shape and all associated shape vertices from the specified shape and vertices arrays into the Collider.</para>
      </summary>
      <param name="shapes">The array to use as the source of shapes.</param>
      <param name="vertices">The array to use as the source of vertices.</param>
      <param name="srcShapeIndex">The source shape index within the shapes array used to assign to the Collider.</param>
      <param name="dstShapeIndex">The destination shape index within the Collider to copy the source shape to.</param>
    </member>
    <member name="M:UnityEngine.CustomCollider2D.SetCustomShapes(UnityEngine.PhysicsShapeGroup2D)">
      <summary>
        <para>Sets all the shapes and vertices in the Collider to those represented by the specified PhysicsShapeGroup2D.</para>
      </summary>
      <param name="physicsShapeGroup">The PhysicsShapeGroup2D to use as the source of shapes and vertices.</param>
    </member>
    <member name="M:UnityEngine.CustomCollider2D.SetCustomShapes(Unity.Collections.NativeArray`1&lt;UnityEngine.PhysicsShape2D&gt;,Unity.Collections.NativeArray`1&lt;UnityEngine.Vector2&gt;)">
      <summary>
        <para>Sets all the shapes and vertices in the Collider to those represented by the specified arrays.</para>
      </summary>
      <param name="shapes">The array containing all the shapes used to assign to the Collider.</param>
      <param name="vertices">The array containing all the vertices used to assign to the Collider.</param>
    </member>
    <member name="T:UnityEngine.DistanceJoint2D">
      <summary>
        <para>Joint that keeps two Rigidbody2D objects a fixed distance apart.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.DistanceJoint2D.autoConfigureDistance">
      <summary>
        <para>Should the distance be calculated automatically?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.DistanceJoint2D.distance">
      <summary>
        <para>The distance separating the two ends of the joint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.DistanceJoint2D.maxDistanceOnly">
      <summary>
        <para>Whether to maintain a maximum distance only or not.  If not then the absolute distance will be maintained instead.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.EdgeCollider2D">
      <summary>
        <para>Collider for 2D physics representing an arbitrary set of connected edges (lines) defined by its vertices.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.EdgeCollider2D.adjacentEndPoint">
      <summary>
        <para>Defines the position of a virtual point adjacent to the end point of the EdgeCollider2D.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.EdgeCollider2D.adjacentStartPoint">
      <summary>
        <para>Defines the position of a virtual point adjacent to the start point of the EdgeCollider2D.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.EdgeCollider2D.edgeCount">
      <summary>
        <para>Gets the number of edges.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.EdgeCollider2D.edgeRadius">
      <summary>
        <para>Controls the radius of all edges created by the collider.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.EdgeCollider2D.pointCount">
      <summary>
        <para>Gets the number of points.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.EdgeCollider2D.points">
      <summary>
        <para>Get or set the points defining multiple continuous edges.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.EdgeCollider2D.useAdjacentEndPoint">
      <summary>
        <para>Set this to true to use the adjacentEndPoint to form the collision normal that is used to calculate the collision response when a collision occurs at the Edge Collider's end point. Set this to false to not use the adjacentEndPoint, and the collision normal becomes the direction of motion of the collision.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.EdgeCollider2D.useAdjacentStartPoint">
      <summary>
        <para>Set this to true to use the adjacentStartPoint to form the collision normal that is used to calculate the collision response when a collision occurs at the Edge Collider's start point. Set this to false to not use the adjacentStartPoint, and the collision normal becomes the direction of motion of the collision.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.EdgeCollider2D.GetPoints(System.Collections.Generic.List`1&lt;UnityEngine.Vector2&gt;)">
      <summary>
        <para>Gets all the points that define a set of continuous edges.</para>
      </summary>
      <param name="points">A list of Vector2 used to receive the points.</param>
      <returns>
        <para>Returns the number of points placed in the points list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.EdgeCollider2D.Reset">
      <summary>
        <para>Reset to a single edge consisting of two points.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.EdgeCollider2D.SetPoints(System.Collections.Generic.List`1&lt;UnityEngine.Vector2&gt;)">
      <summary>
        <para>Sets all the points that define a set of continuous edges.</para>
      </summary>
      <param name="points">A list of Vector2 used to set the points. This list must contain at least two points.</param>
      <returns>
        <para>Returns true if the list contains two or more points and the points are correctly set. Returns false otherwise.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Effector2D">
      <summary>
        <para>A base class for all 2D effectors.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Effector2D.colliderMask">
      <summary>
        <para>The mask used to select specific layers allowed to interact with the effector.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Effector2D.useColliderMask">
      <summary>
        <para>Should the collider-mask be used or the global collision matrix?</para>
      </summary>
    </member>
    <member name="T:UnityEngine.EffectorForceMode2D">
      <summary>
        <para>The mode used to apply Effector2D forces.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EffectorForceMode2D.Constant">
      <summary>
        <para>The force is applied at a constant rate.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EffectorForceMode2D.InverseLinear">
      <summary>
        <para>The force is applied inverse-linear relative to a point.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EffectorForceMode2D.InverseSquared">
      <summary>
        <para>The force is applied inverse-squared relative to a point.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.EffectorSelection2D">
      <summary>
        <para>Selects the source and/or target to be used by an Effector2D.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EffectorSelection2D.Collider">
      <summary>
        <para>The source/target is defined by the Collider2D.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EffectorSelection2D.Rigidbody">
      <summary>
        <para>The source/target is defined by the Rigidbody2D.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.FixedJoint2D">
      <summary>
        <para>Connects two Rigidbody2D together at their anchor points using a configurable spring.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.FixedJoint2D.dampingRatio">
      <summary>
        <para>The amount by which the spring force is reduced in proportion to the movement speed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.FixedJoint2D.frequency">
      <summary>
        <para>The frequency at which the spring oscillates around the distance between the objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.FixedJoint2D.referenceAngle">
      <summary>
        <para>The angle referenced between the two bodies used as the constraint for the joint.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ForceMode2D">
      <summary>
        <para>Option for how to apply a force using Rigidbody2D.AddForce.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ForceMode2D.Force">
      <summary>
        <para>Add a force to the Rigidbody2D, using its mass.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ForceMode2D.Impulse">
      <summary>
        <para>Add an instant force impulse to the rigidbody2D, using its mass.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.FrictionJoint2D">
      <summary>
        <para>Applies both force and torque to reduce both the linear and angular velocities to zero.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.FrictionJoint2D.maxForce">
      <summary>
        <para>The maximum force that can be generated when trying to maintain the friction joint constraint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.FrictionJoint2D.maxTorque">
      <summary>
        <para>The maximum torque that can be generated when trying to maintain the friction joint constraint.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.HingeJoint2D">
      <summary>
        <para>Joint that allows a Rigidbody2D object to rotate around a point in space or a point on another object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HingeJoint2D.jointAngle">
      <summary>
        <para>The current joint angle (in degrees) with respect to the reference angle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HingeJoint2D.jointSpeed">
      <summary>
        <para>The current joint speed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HingeJoint2D.limits">
      <summary>
        <para>Limit of angular rotation (in degrees) on the joint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HingeJoint2D.limitState">
      <summary>
        <para>Gets the state of the joint limit.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HingeJoint2D.motor">
      <summary>
        <para>Parameters for the motor force applied to the joint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HingeJoint2D.referenceAngle">
      <summary>
        <para>The angle (in degrees) referenced between the two bodies used as the constraint for the joint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HingeJoint2D.useLimits">
      <summary>
        <para>Should limits be placed on the range of rotation?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HingeJoint2D.useMotor">
      <summary>
        <para>Should the joint be rotated automatically by a motor torque?</para>
      </summary>
    </member>
    <member name="M:UnityEngine.HingeJoint2D.GetMotorTorque(System.Single)">
      <summary>
        <para>Gets the motor torque of the joint given the specified timestep.</para>
      </summary>
      <param name="timeStep">The time to calculate the motor torque for.</param>
    </member>
    <member name="T:UnityEngine.Joint2D">
      <summary>
        <para>Parent class for joints to connect Rigidbody2D objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Joint2D.attachedRigidbody">
      <summary>
        <para>The Rigidbody2D attached to the Joint2D.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Joint2D.breakForce">
      <summary>
        <para>The force that needs to be applied for this joint to break.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Joint2D.breakTorque">
      <summary>
        <para>The torque that needs to be applied for this joint to break.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Joint2D.collideConnected">
      <summary>
        <para>Can the joint collide with the other Rigidbody2D object to which it is attached?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Joint2D.connectedBody">
      <summary>
        <para>The Rigidbody2D object to which the other end of the joint is attached (ie, the object without the joint component).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Joint2D.enableCollision">
      <summary>
        <para>Should the two rigid bodies connected with this joint collide with each other?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Joint2D.reactionForce">
      <summary>
        <para>Gets the reaction force of the joint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Joint2D.reactionTorque">
      <summary>
        <para>Gets the reaction torque of the joint.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Joint2D.GetReactionForce(System.Single)">
      <summary>
        <para>Gets the reaction force of the joint given the specified timeStep.</para>
      </summary>
      <param name="timeStep">The time to calculate the reaction force for.</param>
      <returns>
        <para>The reaction force of the joint in the specified timeStep.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Joint2D.GetReactionTorque(System.Single)">
      <summary>
        <para>Gets the reaction torque of the joint given the specified timeStep.</para>
      </summary>
      <param name="timeStep">The time to calculate the reaction torque for.</param>
      <returns>
        <para>The reaction torque of the joint in the specified timeStep.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.JointAngleLimits2D">
      <summary>
        <para>Angular limits on the rotation of a Rigidbody2D object around a HingeJoint2D.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.JointAngleLimits2D.max">
      <summary>
        <para>Upper angular limit of rotation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.JointAngleLimits2D.min">
      <summary>
        <para>Lower angular limit of rotation.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.JointLimitState2D">
      <summary>
        <para>Represents the state of a joint limit.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.JointLimitState2D.EqualLimits">
      <summary>
        <para>Represents a state where the joint limit is at the specified lower and upper limits (they are identical).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.JointLimitState2D.Inactive">
      <summary>
        <para>Represents a state where the joint limit is inactive.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.JointLimitState2D.LowerLimit">
      <summary>
        <para>Represents a state where the joint limit is at the specified lower limit.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.JointLimitState2D.UpperLimit">
      <summary>
        <para>Represents a state where the joint limit is at the specified upper limit.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.JointMotor2D">
      <summary>
        <para>Parameters for the optional motor force applied to a Joint2D.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.JointMotor2D.maxMotorTorque">
      <summary>
        <para>The maximum force that can be applied to the Rigidbody2D at the joint to attain the target speed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.JointMotor2D.motorSpeed">
      <summary>
        <para>The desired speed for the Rigidbody2D to reach as it moves with the joint.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.JointSuspension2D">
      <summary>
        <para>Joint suspension is used to define how suspension works on a WheelJoint2D.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.JointSuspension2D.angle">
      <summary>
        <para>The world angle (in degrees) along which the suspension will move.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.JointSuspension2D.dampingRatio">
      <summary>
        <para>The amount by which the suspension spring force is reduced in proportion to the movement speed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.JointSuspension2D.frequency">
      <summary>
        <para>The frequency at which the suspension spring oscillates.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.JointTranslationLimits2D">
      <summary>
        <para>Motion limits of a Rigidbody2D object along a SliderJoint2D.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.JointTranslationLimits2D.max">
      <summary>
        <para>Maximum distance the Rigidbody2D object can move from the Slider Joint's anchor.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.JointTranslationLimits2D.min">
      <summary>
        <para>Minimum distance the Rigidbody2D object can move from the Slider Joint's anchor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Physics2D">
      <summary>
        <para>Global settings and helpers for 2D physics.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.alwaysShowColliders">
      <summary>
        <para>Enable to always show the Collider Gizmos even when they are not selected.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.angularSleepTolerance">
      <summary>
        <para>A Rigidbody cannot sleep if its angular velocity is above this tolerance threshold.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.autoSimulation">
      <summary>
        <para>Set whether the physics should be simulated automatically or not.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.autoSyncTransforms">
      <summary>
        <para>Set whether to automatically sync changes to the Transform component with the physics engine.
                </para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.baumgarteScale">
      <summary>
        <para>The scale factor that controls how fast overlaps are resolved.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.baumgarteTOIScale">
      <summary>
        <para>The scale factor that controls how fast TOI overlaps are resolved.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.callbacksOnDisable">
      <summary>
        <para>Use this to control whether or not the appropriate OnCollisionExit2D or OnTriggerExit2D callbacks should be called when a Collider2D is disabled.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.changeStopsCallbacks">
      <summary>
        <para>Set whether the reporting of collisions callbacks immediately stops if any of the objects involved in the collision are deleted or moved. </para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.colliderAABBColor">
      <summary>
        <para>Set the color used by the Gizmos to show all Collider axis-aligned bounding boxes (AABBs).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.colliderAsleepColor">
      <summary>
        <para>The color used by the Gizmos to show all asleep Colliders (Collider is asleep when the body is asleep).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.colliderAwakeColor">
      <summary>
        <para>The color used by the Gizmos to show all awake Colliders (Collider is awake when the body is awake).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.colliderContactColor">
      <summary>
        <para>The color used by the Gizmos to show all Collider contacts.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.contactArrowScale">
      <summary>
        <para>The scale of the contact arrow used by the Collider Gizmos.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.defaultContactOffset">
      <summary>
        <para>The default contact offset of the newly created Colliders.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.defaultPhysicsScene">
      <summary>
        <para>The PhysicsScene2D automatically created when Unity starts.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.deleteStopsCallbacks">
      <summary>
        <para>Set whether to continue or stop the proccesing of collision callbacks if any of the objects involved in the collision are deleted.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.gravity">
      <summary>
        <para>Acceleration due to gravity.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.jobOptions">
      <summary>
        <para>A set of options that control how physics operates when using the job system to multithread the physics simulation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.linearSleepTolerance">
      <summary>
        <para>A rigid-body cannot sleep if its linear velocity is above this tolerance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.maxAngularCorrection">
      <summary>
        <para>The maximum angular position correction used when solving constraints.  This helps to prevent overshoot.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.maxLinearCorrection">
      <summary>
        <para>The maximum linear position correction used when solving constraints.  This helps to prevent overshoot.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.maxRotationSpeed">
      <summary>
        <para>The maximum angular speed of a rigid-body per physics update.  Increasing this can cause numerical problems.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.maxTranslationSpeed">
      <summary>
        <para>The maximum linear speed of a rigid-body per physics update.  Increasing this can cause numerical problems.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.minPenetrationForPenalty">
      <summary>
        <para>This property is obsolete.  You should use defaultContactOffset instead.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.positionIterations">
      <summary>
        <para>The number of iterations of the physics solver when considering objects' positions.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.queriesHitTriggers">
      <summary>
        <para>Do raycasts detect Colliders configured as triggers?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.queriesStartInColliders">
      <summary>
        <para>Set the raycasts or linecasts that start inside Colliders to detect or not detect those Colliders.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.raycastsHitTriggers">
      <summary>
        <para>Set the raycasts to either detect or not detect Triggers.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.raycastsStartInColliders">
      <summary>
        <para>Do ray/line casts that start inside a Collider(s) detect those Collider(s)?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.reuseCollisionCallbacks">
      <summary>
        <para>Determines whether the garbage collector should reuse only a single instance of a Collision2D type for all collision callbacks.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.showColliderAABB">
      <summary>
        <para>Should the Collider Gizmos show the AABBs for each Collider?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.showColliderContacts">
      <summary>
        <para>Should the Collider Gizmos show current contacts for each Collider?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.showColliderSleep">
      <summary>
        <para>Should the Collider Gizmos show the sleep-state for each Collider?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.simulationMode">
      <summary>
        <para>Controls when Unity executes the 2D physics simulation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.timeToSleep">
      <summary>
        <para>The time in seconds that a rigid-body must be still before it will go to sleep.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.velocityIterations">
      <summary>
        <para>The number of iterations of the physics solver when considering objects' velocities.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.velocityThreshold">
      <summary>
        <para>Any collisions with a relative linear velocity below this threshold will be treated as inelastic.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Physics2D.AllLayers">
      <summary>
        <para>Layer mask constant that includes all layers.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Physics2D.BoxCast(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Casts a box against Colliders in the Scene, returning the first Collider to contact with it.</para>
      </summary>
      <param name="origin">The point in 2D space where the box originates.</param>
      <param name="size">The size of the box.</param>
      <param name="angle">The angle of the box (in degrees).</param>
      <param name="direction">A vector representing the direction of the box.</param>
      <param name="distance">The maximum distance over which to cast the box.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than or equal to this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than or equal to this value.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.BoxCast(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.Vector2,UnityEngine.ContactFilter2D,UnityEngine.RaycastHit2D[],System.Single)">
      <summary>
        <para>Casts a box against the Colliders in the Scene and returns all Colliders that are in contact with it.</para>
      </summary>
      <param name="origin">The point in 2D space where the box originates.</param>
      <param name="size">The size of the box.</param>
      <param name="angle">The angle of the box (in degrees).</param>
      <param name="direction">A vector representing the direction of the box.</param>
      <param name="distance">The maximum distance over which to cast the box.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.BoxCast(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.Vector2,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.RaycastHit2D&gt;,System.Single)">
      <summary>
        <para>Casts a box against the Colliders in the Scene and returns all Colliders that are in contact with it.</para>
      </summary>
      <param name="origin">The point in 2D space where the box originates.</param>
      <param name="size">The size of the box.</param>
      <param name="angle">The angle of the box (in degrees).</param>
      <param name="direction">A vector representing the direction of the box.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="results">The list to receive results.</param>
      <param name="distance">The maximum distance over which to cast the box.</param>
      <returns>
        <para>Returns the number of results placed in the results list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.BoxCastAll(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Casts a box against Colliders in the Scene, returning all Colliders that contact with it.</para>
      </summary>
      <param name="origin">The point in 2D space where the box originates.</param>
      <param name="size">The size of the box.</param>
      <param name="angle">The angle of the box (in degrees).</param>
      <param name="direction">A vector representing the direction of the box.</param>
      <param name="distance">The maximum distance over which to cast the box.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than or equal to this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than or equal to this value.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.BoxCastNonAlloc(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.Vector2,UnityEngine.RaycastHit2D[],System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Casts a box into the Scene, returning Colliders that contact with it into the provided results array. Note: This method will be deprecated in a future build and it is recommended to use BoxCast instead.</para>
      </summary>
      <param name="origin">The point in 2D space where the box originates.</param>
      <param name="size">The size of the box.</param>
      <param name="angle">The angle of the box (in degrees).</param>
      <param name="direction">A vector representing the direction of the box.</param>
      <param name="results">Array to receive results.</param>
      <param name="distance">The maximum distance over which to cast the box.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than or equal to this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than or equal to this value.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.CapsuleCast(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.CapsuleDirection2D,System.Single,UnityEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Casts a capsule against Colliders in the Scene, returning the first Collider to contact with it.</para>
      </summary>
      <param name="origin">The point in 2D space where the capsule originates.</param>
      <param name="size">The size of the capsule.</param>
      <param name="capsuleDirection">The direction of the capsule.</param>
      <param name="angle">The angle of the capsule (in degrees).</param>
      <param name="direction">Vector representing the direction to cast the capsule.</param>
      <param name="distance">The maximum distance over which to cast the capsule.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.CapsuleCast(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.CapsuleDirection2D,System.Single,UnityEngine.Vector2,UnityEngine.ContactFilter2D,UnityEngine.RaycastHit2D[],System.Single)">
      <summary>
        <para>Casts a capsule against the Colliders in the Scene and returns all Colliders that are in contact with it.</para>
      </summary>
      <param name="origin">The point in 2D space where the capsule originates.</param>
      <param name="size">The size of the capsule.</param>
      <param name="capsuleDirection">The direction of the capsule.</param>
      <param name="angle">The angle of the capsule (in degrees).</param>
      <param name="direction">Vector representing the direction to cast the capsule.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <param name="distance">The maximum distance over which to cast the capsule.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.CapsuleCast(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.CapsuleDirection2D,System.Single,UnityEngine.Vector2,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.RaycastHit2D&gt;,System.Single)">
      <summary>
        <para>Casts a capsule against the Colliders in the Scene and returns all Colliders that are in contact with it.</para>
      </summary>
      <param name="origin">The point in 2D space where the capsule originates.</param>
      <param name="size">The size of the capsule.</param>
      <param name="capsuleDirection">The direction of the capsule.</param>
      <param name="angle">The angle of the capsule (in degrees).</param>
      <param name="direction">A vector representing the direction to cast the capsule.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="results">The list to receive results.</param>
      <param name="distance">The maximum distance over which to cast the capsule.</param>
      <returns>
        <para>Returns the number of results placed in the results list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.CapsuleCastAll(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.CapsuleDirection2D,System.Single,UnityEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Casts a capsule against Colliders in the Scene, returning all Colliders that contact with it.</para>
      </summary>
      <param name="origin">The point in 2D space where the capsule originates.</param>
      <param name="size">The size of the capsule.</param>
      <param name="capsuleDirection">The direction of the capsule.</param>
      <param name="angle">The angle of the capsule (in degrees).</param>
      <param name="direction">Vector representing the direction to cast the capsule.</param>
      <param name="distance">The maximum distance over which to cast the capsule.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.CapsuleCastNonAlloc(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.CapsuleDirection2D,System.Single,UnityEngine.Vector2,UnityEngine.RaycastHit2D[],System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Casts a capsule into the Scene, returning Colliders that contact with it into the provided results array. Note: This method will be deprecated in a future build and it is recommended to use CapsuleCast instead.</para>
      </summary>
      <param name="origin">The point in 2D space where the capsule originates.</param>
      <param name="size">The size of the capsule.</param>
      <param name="capsuleDirection">The direction of the capsule.</param>
      <param name="angle">The angle of the capsule (in degrees).</param>
      <param name="direction">Vector representing the direction to cast the capsule.</param>
      <param name="results">Array to receive results.</param>
      <param name="distance">The maximum distance over which to cast the capsule.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.CircleCast(UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Casts a circle against Colliders in the Scene, returning the first Collider to contact with it.</para>
      </summary>
      <param name="origin">The point in 2D space where the circle originates.</param>
      <param name="radius">The radius of the circle.</param>
      <param name="direction">A vector representing the direction of the circle.</param>
      <param name="distance">The maximum distance over which to cast the circle.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than or equal to this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than or equal to this value.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.CircleCast(UnityEngine.Vector2,System.Single,UnityEngine.Vector2,UnityEngine.ContactFilter2D,UnityEngine.RaycastHit2D[],System.Single)">
      <summary>
        <para>Casts a circle against Colliders in the Scene, returning all Colliders that contact with it.</para>
      </summary>
      <param name="origin">The point in 2D space where the circle originates.</param>
      <param name="radius">The radius of the circle.</param>
      <param name="direction">A vector representing the direction of the circle.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <param name="distance">The maximum distance over which to cast the circle.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.CircleCast(UnityEngine.Vector2,System.Single,UnityEngine.Vector2,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.RaycastHit2D&gt;,System.Single)">
      <summary>
        <para>Casts a circle against Colliders in the Scene, returning all Colliders that contact with it.</para>
      </summary>
      <param name="origin">The point in 2D space where the circle originates.</param>
      <param name="radius">The radius of the circle.</param>
      <param name="direction">A vector representing the direction of the circle.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="results">The list to receive results.</param>
      <param name="distance">The maximum distance over which to cast the circle.</param>
      <returns>
        <para>Returns the number of results placed in the results list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.CircleCastAll(UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Casts a circle against Colliders in the Scene, returning all Colliders that contact with it.</para>
      </summary>
      <param name="origin">The point in 2D space where the circle originates.</param>
      <param name="radius">The radius of the circle.</param>
      <param name="direction">A vector representing the direction of the circle.</param>
      <param name="distance">The maximum distance over which to cast the circle.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than or equal to this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than or equal to this value.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.CircleCastNonAlloc(UnityEngine.Vector2,System.Single,UnityEngine.Vector2,UnityEngine.RaycastHit2D[],System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Casts a circle into the Scene, returning Colliders that contact with it into the provided results array. Note: This method will be deprecated in a future build and it is recommended to use CircleCast instead.</para>
      </summary>
      <param name="origin">The point in 2D space where the circle originates.</param>
      <param name="radius">The radius of the circle.</param>
      <param name="direction">A vector representing the direction of the circle.</param>
      <param name="results">Array to receive results.</param>
      <param name="distance">The maximum distance over which to cast the circle.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than or equal to this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than or equal to this value.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.ClosestPoint(UnityEngine.Vector2,UnityEngine.Collider2D)">
      <summary>
        <para>Returns a point on the perimeter of the Collider that is closest to the specified position.</para>
      </summary>
      <param name="position">The position from which to find the closest point on the specified Collider.</param>
      <param name="Collider">The Collider on which to find the closest specified position.</param>
      <param name="collider"></param>
      <returns>
        <para>A point on the perimeter of the Collider that is closest to the specified position.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.ClosestPoint(UnityEngine.Vector2,UnityEngine.Rigidbody2D)">
      <summary>
        <para>Returns a point on the perimeter of all enabled Colliders attached to the rigidbody that is closest to the specified position.</para>
      </summary>
      <param name="position">The position from which to find the closest point on the specified rigidbody.</param>
      <param name="rigidbody">The Rigidbody on which to find the closest specified position.</param>
      <returns>
        <para>A point on the perimeter of a Collider attached to the rigidbody that is closest to the specified position.</para>
      </returns>
    </member>
    <member name="F:UnityEngine.Physics2D.DefaultRaycastLayers">
      <summary>
        <para>Layer mask constant that includes all layers participating in raycasts by default.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Physics2D.Distance(UnityEngine.Collider2D,UnityEngine.Collider2D)">
      <summary>
        <para>Calculates the minimum distance between two Colliders.</para>
      </summary>
      <param name="colliderA">A Collider used to calculate the minimum distance against colliderB.</param>
      <param name="colliderB">A Collider used to calculate the minimum distance against colliderA.</param>
      <returns>
        <para>The minimum distance between colliderA and colliderB.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetContacts(UnityEngine.Collider2D,UnityEngine.Collider2D[])">
      <summary>
        <para>Retrieves all Colliders in contact with the Collider.</para>
      </summary>
      <param name="Collider">The Collider to retrieve contacts for.</param>
      <param name="Colliders">An array of Collider2D used to receive the results.</param>
      <param name="collider"></param>
      <param name="colliders"></param>
      <returns>
        <para>Returns the number of Colliders placed in the Colliders array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetContacts(UnityEngine.Collider2D,UnityEngine.ContactPoint2D[])">
      <summary>
        <para>Retrieves all contact points in contact with the Collider.</para>
      </summary>
      <param name="Collider">The Collider to retrieve contacts for.</param>
      <param name="contacts">An array of ContactPoint2D used to receive the results.</param>
      <param name="collider"></param>
      <returns>
        <para>Returns the number of contacts placed in the contacts array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetContacts(UnityEngine.Collider2D,UnityEngine.ContactFilter2D,UnityEngine.ContactPoint2D[])">
      <summary>
        <para>Retrieves all contact points in contact with the Collider, with the results filtered by the ContactFilter2D.</para>
      </summary>
      <param name="Collider">The Collider to retrieve contacts for.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="contacts">An array of ContactPoint2D used to receive the results.</param>
      <param name="collider"></param>
      <returns>
        <para>Returns the number of contacts placed in the contacts array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetContacts(UnityEngine.Collider2D,UnityEngine.ContactFilter2D,UnityEngine.Collider2D[])">
      <summary>
        <para>Retrieves all Colliders in contact with the Collider, with the results filtered by the ContactFilter2D.</para>
      </summary>
      <param name="Collider">The Collider to retrieve contacts for.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="Colliders">An array of Collider2D used to receive the results.</param>
      <param name="collider"></param>
      <param name="colliders"></param>
      <returns>
        <para>Returns the number of Colliders placed in the Colliders array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetContacts(UnityEngine.Collider2D,UnityEngine.Collider2D,UnityEngine.ContactFilter2D,UnityEngine.ContactPoint2D[])">
      <summary>
        <para>Retrieves all contact points in for contacts between with the collider1 and collider2, with the results filtered by the ContactFilter2D.</para>
      </summary>
      <param name="collider1">The Collider to check if it has contacts against collider2.</param>
      <param name="collider2">The Collider to check if it has contacts against collider1.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="contacts">An array of ContactPoint2D used to receive the results.</param>
      <returns>
        <para>Returns the number of contacts placed in the contacts array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetContacts(UnityEngine.Rigidbody2D,UnityEngine.ContactPoint2D[])">
      <summary>
        <para>Retrieves all contact points in contact with any of the Collider(s) attached to this rigidbody.</para>
      </summary>
      <param name="rigidbody">The rigidbody to retrieve contacts for.  All Colliders attached to this rigidbody will be checked.</param>
      <param name="contacts">An array of ContactPoint2D used to receive the results.</param>
      <returns>
        <para>Returns the number of contacts placed in the contacts array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetContacts(UnityEngine.Rigidbody2D,UnityEngine.Collider2D[])">
      <summary>
        <para>Retrieves all Colliders in contact with any of the Collider(s) attached to this rigidbody.</para>
      </summary>
      <param name="rigidbody">The rigidbody to retrieve contacts for.  All Colliders attached to this rigidbody will be checked.</param>
      <param name="Colliders">An array of Collider2D used to receive the results.</param>
      <param name="colliders"></param>
      <returns>
        <para>Returns the number of Colliders placed in the Colliders array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetContacts(UnityEngine.Rigidbody2D,UnityEngine.ContactFilter2D,UnityEngine.ContactPoint2D[])">
      <summary>
        <para>Retrieves all contact points in contact with any of the Collider(s) attached to this rigidbody, with the results filtered by the ContactFilter2D.</para>
      </summary>
      <param name="rigidbody">The rigidbody to retrieve contacts for.  All Colliders attached to this rigidbody will be checked.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="contacts">An array of ContactPoint2D used to receive the results.</param>
      <returns>
        <para>Returns the number of contacts placed in the contacts array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetContacts(UnityEngine.Rigidbody2D,UnityEngine.ContactFilter2D,UnityEngine.Collider2D[])">
      <summary>
        <para>Retrieves all Colliders in contact with any of the Collider(s) attached to this rigidbody, with the results filtered by the ContactFilter2D.</para>
      </summary>
      <param name="rigidbody">The rigidbody to retrieve contacts for.  All Colliders attached to this rigidbody will be checked.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="Colliders">An array of Collider2D used to receive the results.</param>
      <param name="colliders"></param>
      <returns>
        <para>Returns the number of Colliders placed in the Colliders array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetContacts(UnityEngine.Collider2D,System.Collections.Generic.List`1&lt;UnityEngine.Collider2D&gt;)">
      <summary>
        <para>Retrieves all Colliders in contact with the Collider.</para>
      </summary>
      <param name="Collider">The Collider to retrieve contacts for.</param>
      <param name="Colliders">A list of Collider2D used to receive the results.</param>
      <param name="collider"></param>
      <param name="colliders"></param>
      <returns>
        <para>Returns the number of Colliders placed in the Colliders list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetContacts(UnityEngine.Collider2D,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.Collider2D&gt;)">
      <summary>
        <para>Retrieves all Colliders in contact with the Collider, with the results filtered by the contactFilter2D.</para>
      </summary>
      <param name="Collider">The Collider to retrieve contacts for.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="Colliders">A list of Collider2D used to receive the results.</param>
      <param name="collider"></param>
      <param name="colliders"></param>
      <returns>
        <para>Returns the number of Colliders placed in the Colliders list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetContacts(UnityEngine.Collider2D,System.Collections.Generic.List`1&lt;UnityEngine.ContactPoint2D&gt;)">
      <summary>
        <para>Retrieves all contact points in contact with the Collider.</para>
      </summary>
      <param name="Collider">The Collider to retrieve contacts for.</param>
      <param name="contacts">A list of ContactPoint2D used to receive the results.</param>
      <param name="collider"></param>
      <returns>
        <para>Returns the number of contacts placed in the contacts list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetContacts(UnityEngine.Collider2D,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.ContactPoint2D&gt;)">
      <summary>
        <para>Retrieves all contact points in contact with the Collider, with the results filtered by the contactFilter2D.</para>
      </summary>
      <param name="Collider">The Collider to retrieve contacts for.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="contacts">A list of ContactPoint2D used to receive the results.</param>
      <param name="collider"></param>
      <returns>
        <para>Returns the number of contacts placed in the contacts list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetContacts(UnityEngine.Collider2D,UnityEngine.Collider2D,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.ContactPoint2D&gt;)">
      <summary>
        <para>Retrieves all contact points in for contacts between with the collider1 and collider2, with the results filtered by the contactFilter2D.</para>
      </summary>
      <param name="collider1">The Collider to check if it has contacts against collider2.</param>
      <param name="collider2">The Collider to check if it has contacts against collider1.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="contacts">A list of ContactPoint2D used to receive the results.</param>
      <returns>
        <para>Returns the number of contacts placed in the contacts list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetContacts(UnityEngine.Rigidbody2D,System.Collections.Generic.List`1&lt;UnityEngine.Collider2D&gt;)">
      <summary>
        <para>Retrieves all Colliders in contact with any of the Collider(s) attached to this Rigidbody.</para>
      </summary>
      <param name="rigidbody">The Rigidbody to retrieve contacts for.  All Colliders attached to this Rigidbody will be checked.</param>
      <param name="Colliders">A list of Collider2D used to receive the results.</param>
      <param name="colliders"></param>
      <returns>
        <para>Returns the number of Colliders placed in the Colliders list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetContacts(UnityEngine.Rigidbody2D,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.Collider2D&gt;)">
      <summary>
        <para>Retrieves all Colliders in contact with any of the Collider(s) attached to this Rigidbody, with the results filtered by the contactFilter2D.</para>
      </summary>
      <param name="rigidbody">The Rigidbody to retrieve contacts for.  All Colliders attached to this Rigidbody will be checked.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="Colliders">A list of Collider2D used to receive the results.</param>
      <param name="colliders"></param>
      <returns>
        <para>Returns the number of Colliders placed in the Colliders list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetContacts(UnityEngine.Rigidbody2D,System.Collections.Generic.List`1&lt;UnityEngine.ContactPoint2D&gt;)">
      <summary>
        <para>Retrieves all contact points in contact with any of the Collider(s) attached to this Rigidbody.</para>
      </summary>
      <param name="rigidbody">The Rigidbody to retrieve contacts for.  All Colliders attached to this Rigidbody will be checked.</param>
      <param name="contacts">A list of ContactPoint2D used to receive the results.</param>
      <returns>
        <para>Returns the number of contacts placed in the contacts list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetContacts(UnityEngine.Rigidbody2D,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.ContactPoint2D&gt;)">
      <summary>
        <para>Retrieves all Colliders in contact with any of the Collider(s) attached to this Rigidbody, with the results filtered by the contactFilter2D.</para>
      </summary>
      <param name="rigidbody">The Rigidbody to retrieve contacts for.  All Colliders attached to this Rigidbody will be checked.</param>
      <param name="contactFilter">Returns the number of contacts placed in the contacts list.</param>
      <param name="contacts">A list of ContactPoint2D used to receive the results.</param>
      <returns>
        <para>Returns the number of contacts placed in the contacts list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetIgnoreCollision(UnityEngine.Collider2D,UnityEngine.Collider2D)">
      <summary>
        <para>Checks whether the collision detection system will ignore all collisionstriggers between collider1 and collider2/ or not.</para>
      </summary>
      <param name="collider1">The first Collider to compare to collider2.</param>
      <param name="collider2">The second Collider to compare to collider1.</param>
      <returns>
        <para>Whether the collision detection system will ignore all collisionstriggers between collider1 and collider2/ or not.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetIgnoreLayerCollision(System.Int32,System.Int32)">
      <summary>
        <para>Checks whether collisions between the specified layers be ignored or not.</para>
      </summary>
      <param name="layer1">ID of first layer.</param>
      <param name="layer2">ID of second layer.</param>
      <returns>
        <para>Whether collisions between the specified layers be ignored or not.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetLayerCollisionMask(System.Int32)">
      <summary>
        <para>Get the collision layer mask that indicates which layer(s) the specified layer can collide with.</para>
      </summary>
      <param name="layer">The layer to retrieve the collision layer mask for.</param>
      <returns>
        <para>A mask where each bit indicates a layer and whether it can collide with layer or not.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetRayIntersection(UnityEngine.Ray,System.Single,System.Int32)">
      <summary>
        <para>Cast a 3D ray against the Colliders in the Scene returning the first Collider along the ray.</para>
      </summary>
      <param name="ray">The 3D ray defining origin and direction to test.</param>
      <param name="distance">The maximum distance over which to cast the ray.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetRayIntersectionAll(UnityEngine.Ray,System.Single,System.Int32)">
      <summary>
        <para>Cast a 3D ray against the Colliders in the Scene returning all the Colliders along the ray.</para>
      </summary>
      <param name="ray">The 3D ray defining origin and direction to test.</param>
      <param name="distance">The maximum distance over which to cast the ray.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetRayIntersectionNonAlloc(UnityEngine.Ray,UnityEngine.RaycastHit2D[],System.Single,System.Int32)">
      <summary>
        <para>Cast a 3D ray against the Colliders in the Scene returning the Colliders along the ray. Note: This method will be deprecated in a future build and it is recommended to use GetRayIntersection instead.</para>
      </summary>
      <param name="ray">The 3D ray defining origin and direction to test.</param>
      <param name="distance">The maximum distance over which to cast the ray.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="results">Array to receive results.</param>
      <returns>
        <para>The number of results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.IgnoreCollision(UnityEngine.Collider2D,UnityEngine.Collider2D,System.Boolean)">
      <summary>
        <para>Makes the collision detection system ignore all collisionstriggers between collider1 and collider2/.</para>
      </summary>
      <param name="collider1">The first Collider to compare to collider2.</param>
      <param name="collider2">The second Collider to compare to collider1.</param>
      <param name="ignore">Whether collisionstriggers between collider1 and collider2/ should be ignored or not.</param>
    </member>
    <member name="M:UnityEngine.Physics2D.IgnoreLayerCollision(System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>Choose whether to detect or ignore collisions between a specified pair of layers.</para>
      </summary>
      <param name="layer1">ID of the first layer.</param>
      <param name="layer2">ID of the second layer.</param>
      <param name="ignore">Should collisions between these layers be ignored?</param>
    </member>
    <member name="F:UnityEngine.Physics2D.IgnoreRaycastLayer">
      <summary>
        <para>Layer mask constant for the default layer that ignores raycasts.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Physics2D.IsTouching(UnityEngine.Collider2D,UnityEngine.Collider2D)">
      <summary>
        <para>Checks whether the passed Colliders are in contact or not.</para>
      </summary>
      <param name="collider1">The Collider to check if it is touching collider2.</param>
      <param name="collider2">The Collider to check if it is touching collider1.</param>
      <returns>
        <para>Whether collider1 is touching collider2 or not.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.IsTouching(UnityEngine.Collider2D,UnityEngine.ContactFilter2D)">
      <summary>
        <para>Checks whether the passed Colliders are in contact or not.</para>
      </summary>
      <param name="Collider">The Collider to check if it is touching any other Collider filtered by the contactFilter.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="collider"></param>
      <returns>
        <para>Whether the Collider is touching any other Collider filtered by the contactFilter or not.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.IsTouching(UnityEngine.Collider2D,UnityEngine.Collider2D,UnityEngine.ContactFilter2D)">
      <summary>
        <para>Checks whether the passed Colliders are in contact or not.</para>
      </summary>
      <param name="collider1">The Collider to check if it is touching collider2.</param>
      <param name="collider2">The Collider to check if it is touching collider1.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <returns>
        <para>Whether collider1 is touching collider2 or not.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.IsTouchingLayers(UnityEngine.Collider2D,System.Int32)">
      <summary>
        <para>Checks whether the Collider is touching any Colliders on the specified layerMask or not.</para>
      </summary>
      <param name="Collider">The Collider to check if it is touching Colliders on the layerMask.</param>
      <param name="layerMask">Any Colliders on any of these layers count as touching.</param>
      <param name="collider"></param>
      <returns>
        <para>Whether the Collider is touching any Colliders on the specified layerMask or not.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.Linecast(UnityEngine.Vector2,UnityEngine.Vector2,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Casts a line segment against Colliders in the Scene.</para>
      </summary>
      <param name="start">The start point of the line in world space.</param>
      <param name="end">The end point of the line in world space.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than or equal to this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than or equal to this value.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.Linecast(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.ContactFilter2D,UnityEngine.RaycastHit2D[])">
      <summary>
        <para>Casts a line segment against Colliders in the Scene with results filtered by ContactFilter2D.</para>
      </summary>
      <param name="start">The start point of the line in world space.</param>
      <param name="end">The end point of the line in world space.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.Linecast(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.RaycastHit2D&gt;)">
      <summary>
        <para>Casts a line segment against Colliders in the Scene with results filtered by ContactFilter2D.</para>
      </summary>
      <param name="start">The start point of the line in world space.</param>
      <param name="end">The end point of the line in world space.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="results">The list to receive results.</param>
      <returns>
        <para>Returns the number of results placed in the results list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.LinecastAll(UnityEngine.Vector2,UnityEngine.Vector2,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Casts a line against Colliders in the Scene.</para>
      </summary>
      <param name="start">The start point of the line in world space.</param>
      <param name="end">The end point of the line in world space.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than or equal to this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than or equal to this value.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.LinecastNonAlloc(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.RaycastHit2D[],System.Int32,System.Single,System.Single)">
      <summary>
        <para>Casts a line against Colliders in the Scene. Note: This method will be deprecated in a future build and it is recommended to use Linecast instead.</para>
      </summary>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than or equal to this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than or equal to this value.</param>
      <param name="start">The start point of the line in world space.</param>
      <param name="end">The end point of the line in world space.</param>
      <param name="results">Returned array of objects that intersect the line.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="F:UnityEngine.Physics2D.MaxPolygonShapeVertices">
      <summary>
        <para>The maximum number of vertices allowed per primitive polygon shape type (PhysicsShapeType2D.Polygon). (Read Only)</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapArea(UnityEngine.Vector2,UnityEngine.Vector2,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Checks if a Collider falls within a rectangular area.</para>
      </summary>
      <param name="pointA">One corner of the rectangle.</param>
      <param name="pointB">Diagonally opposite the point A corner of the rectangle.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than or equal to this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than or equal to this value.</param>
      <returns>
        <para>The Collider overlapping the area.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.ContactFilter2D,UnityEngine.Collider2D[])">
      <summary>
        <para>Checks if a Collider falls within a rectangular area.</para>
      </summary>
      <param name="pointA">One corner of the rectangle.</param>
      <param name="pointB">Diagonally opposite the point A corner of the rectangle.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.Collider2D&gt;)">
      <summary>
        <para>Checks if a Collider falls within a rectangular area.</para>
      </summary>
      <param name="pointA">One corner of the rectangle.</param>
      <param name="pointB">Diagonally opposite the point A corner of the rectangle.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.</param>
      <param name="results">The list to receive results.</param>
      <returns>
        <para>Returns the number of results placed in the results list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapAreaAll(UnityEngine.Vector2,UnityEngine.Vector2,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Get a list of all Colliders that fall within a rectangular area.</para>
      </summary>
      <param name="pointA">One corner of the rectangle.</param>
      <param name="pointB">Diagonally opposite the point A corner of the rectangle.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than or equal to this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than or equal to this value.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapAreaNonAlloc(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Collider2D[],System.Int32,System.Single,System.Single)">
      <summary>
        <para>Get a list of all Colliders that fall within a specified area. Note: This method will be deprecated in a future build and it is recommended to use OverlapArea instead.</para>
      </summary>
      <param name="pointA">One corner of the rectangle.</param>
      <param name="pointB">Diagonally opposite the point A corner of the rectangle.</param>
      <param name="results">Array to receive results.</param>
      <param name="layerMask">Filter to check objects only on specified layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than or equal to this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than or equal to this value.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapBox(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Checks if a Collider falls within a box area.</para>
      </summary>
      <param name="point">The center of the box.</param>
      <param name="size">The size of the box.</param>
      <param name="angle">The angle of the box.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
      <returns>
        <para>The Collider overlapping the box.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapBox(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.ContactFilter2D,UnityEngine.Collider2D[])">
      <summary>
        <para>Checks if a Collider falls within a box area.</para>
      </summary>
      <param name="point">The center of the box.</param>
      <param name="size">The size of the box.</param>
      <param name="angle">The angle of the box.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapBox(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.Collider2D&gt;)">
      <summary>
        <para>Checks if a Collider falls within a box area.</para>
      </summary>
      <param name="point">The center of the box.</param>
      <param name="size">The size of the box.</param>
      <param name="angle">The angle of the box.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.</param>
      <param name="results">The list to receive results.</param>
      <returns>
        <para>Returns the number of results placed in the results list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapBoxAll(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Get a list of all Colliders that fall within a box area.</para>
      </summary>
      <param name="point">The center of the box.</param>
      <param name="size">The size of the box.</param>
      <param name="angle">The angle of the box.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapBoxNonAlloc(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.Collider2D[],System.Int32,System.Single,System.Single)">
      <summary>
        <para>Get a list of all Colliders that fall within a box area. Note: This method will be deprecated in a future build and it is recommended to use OverlapBox instead.</para>
      </summary>
      <param name="point">The center of the box.</param>
      <param name="size">The size of the box.</param>
      <param name="angle">The angle of the box.</param>
      <param name="results">Array to receive results.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapCapsule(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.CapsuleDirection2D,System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Checks if a Collider falls within a capsule area.</para>
      </summary>
      <param name="point">The center of the capsule.</param>
      <param name="size">The size of the capsule.</param>
      <param name="direction">The direction of the capsule.</param>
      <param name="angle">The angle of the capsule.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
      <returns>
        <para>The Collider overlapping the capsule.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapCapsule(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.CapsuleDirection2D,System.Single,UnityEngine.ContactFilter2D,UnityEngine.Collider2D[])">
      <summary>
        <para>Checks if a Collider falls within a capsule area.</para>
      </summary>
      <param name="point">The center of the capsule.</param>
      <param name="size">The size of the capsule.</param>
      <param name="direction">The direction of the capsule.</param>
      <param name="angle">The angle of the capsule.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapCapsule(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.CapsuleDirection2D,System.Single,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.Collider2D&gt;)">
      <summary>
        <para>Checks if a Collider falls within a capsule area.</para>
      </summary>
      <param name="point">The center of the capsule.</param>
      <param name="size">The size of the capsule.</param>
      <param name="direction">The direction of the capsule.</param>
      <param name="angle">The angle of the capsule.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.</param>
      <param name="results">The list to receive results.</param>
      <returns>
        <para>Returns the number of results placed in the results list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapCapsuleAll(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.CapsuleDirection2D,System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Get a list of all Colliders that fall within a capsule area.</para>
      </summary>
      <param name="point">The center of the capsule.</param>
      <param name="size">The size of the capsule.</param>
      <param name="direction">The direction of the capsule.</param>
      <param name="angle">The angle of the capsule.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapCapsuleNonAlloc(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.CapsuleDirection2D,System.Single,UnityEngine.Collider2D[],System.Int32,System.Single,System.Single)">
      <summary>
        <para>Get a list of all Colliders that fall within a capsule area. Note: This method will be deprecated in a future build and it is recommended to use OverlapCapsule instead.</para>
      </summary>
      <param name="point">The center of the capsule.</param>
      <param name="size">The size of the capsule.</param>
      <param name="direction">The direction of the capsule.</param>
      <param name="angle">The angle of the capsule.</param>
      <param name="results">Array to receive results.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapCircle(UnityEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Checks if a Collider falls within a circular area.</para>
      </summary>
      <param name="point">Centre of the circle.</param>
      <param name="radius">The radius of the circle.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than or equal to this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than or equal to this value.</param>
      <returns>
        <para>The Collider overlapping the circle.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapCircle(UnityEngine.Vector2,System.Single,UnityEngine.ContactFilter2D,UnityEngine.Collider2D[])">
      <summary>
        <para>Checks if a Collider is within a circular area.</para>
      </summary>
      <param name="point">Centre of the circle.</param>
      <param name="radius">The radius of the circle.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapCircle(UnityEngine.Vector2,System.Single,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.Collider2D&gt;)">
      <summary>
        <para>Checks if a Collider is within a circular area.</para>
      </summary>
      <param name="point">Centre of the circle.</param>
      <param name="radius">The radius of the circle.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.</param>
      <param name="results">The list to receive results.</param>
      <returns>
        <para>Returns the number of results placed in the results list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapCircleAll(UnityEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Get a list of all Colliders that fall within a circular area.</para>
      </summary>
      <param name="point">The center of the circle.</param>
      <param name="radius">The radius of the circle.</param>
      <param name="layerMask">Filter to check objects only on specified layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than or equal to this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than or equal to this value.</param>
      <returns>
        <para>The cast results.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapCircleNonAlloc(UnityEngine.Vector2,System.Single,UnityEngine.Collider2D[],System.Int32,System.Single,System.Single)">
      <summary>
        <para>Get a list of all Colliders that fall within a circular area. Note: This method will be deprecated in a future build and it is recommended to use OverlapCircle instead.</para>
      </summary>
      <param name="point">The center of the circle.</param>
      <param name="radius">The radius of the circle.</param>
      <param name="results">Array to receive results.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than or equal to this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than or equal to this value.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapCollider(UnityEngine.Collider2D,UnityEngine.ContactFilter2D,UnityEngine.Collider2D[])">
      <summary>
        <para>Gets a list of all Colliders that overlap the given Collider.</para>
      </summary>
      <param name="Collider">The Collider that defines the area used to query for other Collider overlaps.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <param name="collider"></param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapCollider(UnityEngine.Collider2D,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.Collider2D&gt;)">
      <summary>
        <para>Gets a list of all Colliders that overlap the given Collider.</para>
      </summary>
      <param name="Collider">The Collider that defines the area used to query for other Collider overlaps.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.</param>
      <param name="results">The list to receive results.</param>
      <param name="collider"></param>
      <returns>
        <para>Returns the number of results placed in the results list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapPoint(UnityEngine.Vector2,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Checks if a Collider overlaps a point in space.</para>
      </summary>
      <param name="point">A point in world space.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than or equal to this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than or equal to this value.</param>
      <returns>
        <para>The Collider overlapping the point.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapPoint(UnityEngine.Vector2,UnityEngine.ContactFilter2D,UnityEngine.Collider2D[])">
      <summary>
        <para>Checks if a Collider overlaps a point in world space.</para>
      </summary>
      <param name="point">A point in world space.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapPoint(UnityEngine.Vector2,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.Collider2D&gt;)">
      <summary>
        <para>Checks if a Collider overlaps a point in world space.</para>
      </summary>
      <param name="point">A point in world space.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.</param>
      <param name="results">The list to receive results.</param>
      <returns>
        <para>Returns the number of results placed in the results list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapPointAll(UnityEngine.Vector2,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Get a list of all Colliders that overlap a point in space.</para>
      </summary>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than or equal to this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than or equal to this value.</param>
      <param name="point">A point in space.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapPointNonAlloc(UnityEngine.Vector2,UnityEngine.Collider2D[],System.Int32,System.Single,System.Single)">
      <summary>
        <para>Get a list of all Colliders that overlap a point in space. Note: This method will be deprecated in a future build and it is recommended to use OverlapPoint instead.</para>
      </summary>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than or equal to this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than or equal to this value.</param>
      <param name="point">A point in space.</param>
      <param name="results">Array to receive results.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.Raycast(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Casts a ray against Colliders in the Scene.</para>
      </summary>
      <param name="origin">The point in 2D space where the ray originates.</param>
      <param name="direction">A vector representing the direction of the ray.</param>
      <param name="distance">The maximum distance over which to cast the ray.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than or equal to this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than or equal to this value.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.Raycast(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.ContactFilter2D,UnityEngine.RaycastHit2D[],System.Single)">
      <summary>
        <para>Casts a ray against Colliders in the Scene.</para>
      </summary>
      <param name="origin">The point in 2D space where the ray originates.</param>
      <param name="direction">A vector representing the direction of the ray.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <param name="distance">The maximum distance over which to cast the ray.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.Raycast(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.RaycastHit2D&gt;,System.Single)">
      <summary>
        <para>Casts a ray against Colliders in the Scene.</para>
      </summary>
      <param name="origin">The point in 2D space where the ray originates.</param>
      <param name="direction">A vector representing the direction of the ray.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="results">The list to receive results.</param>
      <param name="distance">The maximum distance over which to cast the ray.</param>
      <returns>
        <para>Returns the number of results placed in the results list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.RaycastAll(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Casts a ray against Colliders in the Scene, returning all Colliders that contact with it.</para>
      </summary>
      <param name="origin">The point in 2D space where the ray originates.</param>
      <param name="direction">A vector representing the direction of the ray.</param>
      <param name="distance">The maximum distance over which to cast the ray.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than or equal to this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than or equal to this value.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.RaycastNonAlloc(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.RaycastHit2D[],System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Casts a ray into the Scene. Note: This method will be deprecated in a future build and it is recommended to use Raycast instead.</para>
      </summary>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than or equal to this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than or equal to this value.</param>
      <param name="origin">The point in 2D space where the ray originates.</param>
      <param name="direction">A vector representing the direction of the ray.</param>
      <param name="results">Array to receive results.</param>
      <param name="distance">The maximum distance over which to cast the ray.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.SetLayerCollisionMask(System.Int32,System.Int32)">
      <summary>
        <para>Set the collision layer mask that indicates which layer(s) the specified layer can collide with.</para>
      </summary>
      <param name="layer">The layer to set the collision layer mask for.</param>
      <param name="layerMask">A mask where each bit indicates a layer and whether it can collide with layer or not.</param>
    </member>
    <member name="M:UnityEngine.Physics2D.Simulate(System.Single)">
      <summary>
        <para>Simulate physics in the Scene.</para>
      </summary>
      <param name="step">The time to advance physics by.</param>
      <returns>
        <para>Whether the simulation was run or not.  Running the simulation during physics callbacks will always fail.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.SyncTransforms">
      <summary>
        <para>Synchronizes.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PhysicsJobOptions2D">
      <summary>
        <para>A set of options that control how physics operates when using the job system to multithread the physics simulation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsJobOptions2D.clearBodyForcesPerJob">
      <summary>
        <para>Controls the minimum number of bodies to be cleared in each simulation job.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsJobOptions2D.clearFlagsPerJob">
      <summary>
        <para>Controls the minimum number of flags to be cleared in each simulation job.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsJobOptions2D.collideContactsPerJob">
      <summary>
        <para>Controls the minimum number of contacts to collide in each simulation job.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsJobOptions2D.findNearestContactsPerJob">
      <summary>
        <para>Controls the minimum number of nearest contacts to find in each simulation job.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsJobOptions2D.interpolationPosesPerJob">
      <summary>
        <para>Controls the minimum number of Rigidbody2D being interpolated in each simulation job.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsJobOptions2D.islandSolverBodiesPerJob">
      <summary>
        <para>Controls the minimum number of bodies to solve in each simulation job when performing island solving.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsJobOptions2D.islandSolverBodyCostScale">
      <summary>
        <para>Scales the cost of each body during discrete island solving.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsJobOptions2D.islandSolverContactCostScale">
      <summary>
        <para>Scales the cost of each contact during discrete island solving.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsJobOptions2D.islandSolverContactsPerJob">
      <summary>
        <para>Controls the minimum number of contacts to solve in each simulation job when performing island solving.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsJobOptions2D.islandSolverCostThreshold">
      <summary>
        <para>The minimum threshold cost of all bodies, contacts and joints in an island during discrete island solving.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsJobOptions2D.islandSolverJointCostScale">
      <summary>
        <para>Scales the cost of each joint during discrete island solving.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsJobOptions2D.newContactsPerJob">
      <summary>
        <para>Controls the minimum number of new contacts to find in each simulation job.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsJobOptions2D.syncContinuousFixturesPerJob">
      <summary>
        <para>Controls the minimum number of fixtures to synchronize in the broadphase during continuous island solving in each simulation job.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsJobOptions2D.syncDiscreteFixturesPerJob">
      <summary>
        <para>Controls the minimum number of fixtures to synchronize in the broadphase during discrete island solving in each simulation job.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsJobOptions2D.updateTriggerContactsPerJob">
      <summary>
        <para>Controls the minimum number of trigger contacts to update in each simulation job.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsJobOptions2D.useConsistencySorting">
      <summary>
        <para>Should physics simulation sort multi-threaded results to maintain processing order consistency?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsJobOptions2D.useMultithreading">
      <summary>
        <para>Should physics simulation use multithreading?</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PhysicsMaterial2D">
      <summary>
        <para>Asset type that defines the surface properties of a Collider2D.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsMaterial2D.bounciness">
      <summary>
        <para>The degree of elasticity during collisions.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsMaterial2D.friction">
      <summary>
        <para>Coefficient of friction.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PhysicsScene2D">
      <summary>
        <para>Represents a single instance of a 2D physics Scene.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.BoxCast(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Single,System.Int32)">
      <summary>
        <para>Casts a box against colliders in the PhysicsScene2D, returning the first intersection only.</para>
      </summary>
      <param name="origin">The point in 2D space where the box originates.</param>
      <param name="size">The size of the box.</param>
      <param name="angle">The angle of the box (in degrees).</param>
      <param name="direction">Vector representing the direction to cast the box.</param>
      <param name="distance">Maximum distance over which to cast the box.</param>
      <param name="layerMask">Filter to detect colliders only on certain layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.BoxCast(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Single,UnityEngine.ContactFilter2D)">
      <summary>
        <para>Casts a box against colliders in the PhysicsScene2D, returning the first intersection only.</para>
      </summary>
      <param name="origin">The point in 2D space where the box originates.</param>
      <param name="size">The size of the box.</param>
      <param name="angle">The angle of the box (in degrees).</param>
      <param name="direction">Vector representing the direction to cast the box.</param>
      <param name="distance">Maximum distance over which to cast the box.</param>
      <param name="layerMask">Filter to detect colliders only on certain layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.BoxCast(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Single,UnityEngine.RaycastHit2D[],System.Int32)">
      <summary>
        <para>Casts a box against the colliders in the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="origin">The point in 2D space where the box originates.</param>
      <param name="size">The size of the box.</param>
      <param name="angle">The angle of the box (in degrees).</param>
      <param name="direction">Vector representing the direction to cast the box.</param>
      <param name="distance">Maximum distance over which to cast the box.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <param name="layerMask">Filter to detect colliders only on certain layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.BoxCast(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Single,UnityEngine.ContactFilter2D,UnityEngine.RaycastHit2D[])">
      <summary>
        <para>Casts a box against the colliders in the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="origin">The point in 2D space where the box originates.</param>
      <param name="size">The size of the box.</param>
      <param name="angle">The angle of the box (in degrees).</param>
      <param name="direction">Vector representing the direction to cast the box.</param>
      <param name="distance">Maximum distance over which to cast the box.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <param name="layerMask">Filter to detect colliders only on certain layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.BoxCast(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Single,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.RaycastHit2D&gt;)">
      <summary>
        <para>Casts a box against the Colliders in the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="origin">The point in 2D space where the box originates.</param>
      <param name="size">The size of the box.</param>
      <param name="angle">The angle of the box (in degrees).</param>
      <param name="direction">Vector representing the direction to cast the box.</param>
      <param name="distance">Maximum distance over which to cast the box.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="results">The list to receive results.</param>
      <returns>
        <para>Returns the number of results placed in the results list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.CapsuleCast(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.CapsuleDirection2D,System.Single,UnityEngine.Vector2,System.Single,System.Int32)">
      <summary>
        <para>Casts a capsule against colliders in the PhysicsScene2D, returning the first intersection only.</para>
      </summary>
      <param name="origin">The point in 2D space where the capsule originates.</param>
      <param name="size">The size of the capsule.</param>
      <param name="capsuleDirection">The direction of the capsule.</param>
      <param name="angle">The angle of the capsule (in degrees).</param>
      <param name="direction">Vector representing the direction to cast the capsule.</param>
      <param name="distance">Maximum distance over which to cast the capsule.</param>
      <param name="layerMask">The filter used to detect Colliders only on certain layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.CapsuleCast(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.CapsuleDirection2D,System.Single,UnityEngine.Vector2,System.Single,UnityEngine.ContactFilter2D)">
      <summary>
        <para>Casts a capsule against colliders in the PhysicsScene2D, returning the first intersection only.</para>
      </summary>
      <param name="origin">The point in 2D space where the capsule originates.</param>
      <param name="size">The size of the capsule.</param>
      <param name="capsuleDirection">The direction of the capsule.</param>
      <param name="angle">The angle of the capsule (in degrees).</param>
      <param name="direction">Vector representing the direction to cast the capsule.</param>
      <param name="distance">Maximum distance over which to cast the capsule.</param>
      <param name="layerMask">The filter used to detect Colliders only on certain layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.CapsuleCast(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.CapsuleDirection2D,System.Single,UnityEngine.Vector2,System.Single,UnityEngine.RaycastHit2D[],System.Int32)">
      <summary>
        <para>Casts a capsule against the Colliders in the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="origin">The point in 2D space where the capsule originates.</param>
      <param name="size">The size of the capsule.</param>
      <param name="capsuleDirection">The direction of the capsule.</param>
      <param name="angle">The angle of the capsule (in degrees).</param>
      <param name="direction">Vector representing the direction to cast the capsule.</param>
      <param name="distance">Maximum distance over which to cast the capsule.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <param name="layerMask">The filter used to detect Colliders only on certain layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.CapsuleCast(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.CapsuleDirection2D,System.Single,UnityEngine.Vector2,System.Single,UnityEngine.ContactFilter2D,UnityEngine.RaycastHit2D[])">
      <summary>
        <para>Casts a capsule against the Colliders in the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="origin">The point in 2D space where the capsule originates.</param>
      <param name="size">The size of the capsule.</param>
      <param name="capsuleDirection">The direction of the capsule.</param>
      <param name="angle">The angle of the capsule (in degrees).</param>
      <param name="direction">Vector representing the direction to cast the capsule.</param>
      <param name="distance">Maximum distance over which to cast the capsule.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <param name="layerMask">The filter used to detect Colliders only on certain layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.CapsuleCast(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.CapsuleDirection2D,System.Single,UnityEngine.Vector2,System.Single,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.RaycastHit2D&gt;)">
      <summary>
        <para>Casts a capsule against the Colliders in the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="origin">The point in 2D space where the capsule originates.</param>
      <param name="size">The size of the capsule.</param>
      <param name="capsuleDirection">The direction of the capsule.</param>
      <param name="angle">The angle of the capsule (in degrees).</param>
      <param name="direction">Vector representing the direction to cast the capsule.</param>
      <param name="distance">Maximum distance over which to cast the capsule.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="results">The list to receive results.</param>
      <returns>
        <para>Returns the number of results placed in the results list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.CircleCast(UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Single,System.Int32)">
      <summary>
        <para>Casts a circle against colliders in the PhysicsScene2D, returning the first intersection only.</para>
      </summary>
      <param name="origin">The point in 2D space where the circle originates.</param>
      <param name="radius">The radius of the circle.</param>
      <param name="direction">Vector representing the direction to cast the circle.</param>
      <param name="distance">Maximum distance over which to cast the circle.</param>
      <param name="layerMask">The filter used to detect Colliders only on certain layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.CircleCast(UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Single,UnityEngine.ContactFilter2D)">
      <summary>
        <para>Casts a circle against colliders in the PhysicsScene2D, returning the first intersection only.</para>
      </summary>
      <param name="origin">The point in 2D space where the circle originates.</param>
      <param name="radius">The radius of the circle.</param>
      <param name="direction">Vector representing the direction to cast the circle.</param>
      <param name="distance">Maximum distance over which to cast the circle.</param>
      <param name="layerMask">The filter used to detect Colliders only on certain layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.CircleCast(UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Single,UnityEngine.RaycastHit2D[],System.Int32)">
      <summary>
        <para>Casts a circle against the colliders in the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="origin">The point in 2D space where the circle originates.</param>
      <param name="radius">The radius of the circle.</param>
      <param name="direction">Vector representing the direction to cast the circle.</param>
      <param name="distance">Maximum distance over which to cast the circle.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <param name="layerMask">The filter used to detect Colliders only on certain layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.CircleCast(UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Single,UnityEngine.ContactFilter2D,UnityEngine.RaycastHit2D[])">
      <summary>
        <para>Casts a circle against the colliders in the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="origin">The point in 2D space where the circle originates.</param>
      <param name="radius">The radius of the circle.</param>
      <param name="direction">Vector representing the direction to cast the circle.</param>
      <param name="distance">Maximum distance over which to cast the circle.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <param name="layerMask">The filter used to detect Colliders only on certain layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.CircleCast(UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Single,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.RaycastHit2D&gt;)">
      <summary>
        <para>Casts a circle against the Colliders in the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="origin">The point in 2D space where the circle originates.</param>
      <param name="radius">The radius of the circle.</param>
      <param name="direction">Vector representing the direction to cast the circle.</param>
      <param name="distance">Maximum distance over which to cast the circle.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="results">The list to receive results.</param>
      <returns>
        <para>Returns the number of results placed in the results list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.GetRayIntersection(UnityEngine.Ray,System.Single,System.Int32)">
      <summary>
        <para>Cast a 3D ray against the colliders in the PhysicsScene2D, returning the first intersection only.</para>
      </summary>
      <param name="ray">The 3D ray defining origin and direction to test.</param>
      <param name="distance">Maximum distance over which to cast the ray.</param>
      <param name="layerMask">Filter to detect colliders only on certain layers.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.GetRayIntersection(UnityEngine.Ray,System.Single,UnityEngine.RaycastHit2D[],System.Int32)">
      <summary>
        <para>Cast a 3D ray against the colliders in the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="ray">The 3D ray defining origin and direction to test.</param>
      <param name="distance">Maximum distance over which to cast the ray.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <param name="layerMask">Filter to detect colliders only on certain layers.</param>
      <returns>
        <para>The number of results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.IsEmpty">
      <summary>
        <para>Determines whether the physics Scene is empty or not.</para>
      </summary>
      <returns>
        <para>True when the physics Scene is empty.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.IsValid">
      <summary>
        <para>Determines whether the physics Scene is valid or not.</para>
      </summary>
      <returns>
        <para>True when the physics Scene valid.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.Linecast(UnityEngine.Vector2,UnityEngine.Vector2,System.Int32)">
      <summary>
        <para>Casts a line segment against colliders in the PhysicsScene2D, returning the first intersection only.</para>
      </summary>
      <param name="start">The start point of the line in world space.</param>
      <param name="end">The end point of the line in world space.</param>
      <param name="layerMask">The filter used to detect Colliders only on certain layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.Linecast(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.ContactFilter2D)">
      <summary>
        <para>Casts a line segment against colliders in the PhysicsScene2D, returning the first intersection only.</para>
      </summary>
      <param name="start">The start point of the line in world space.</param>
      <param name="end">The end point of the line in world space.</param>
      <param name="layerMask">The filter used to detect Colliders only on certain layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.Linecast(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.RaycastHit2D[],System.Int32)">
      <summary>
        <para>Casts a line segment against colliders in the PhysicsScene2D.</para>
      </summary>
      <param name="start">The start point of the line in world space.</param>
      <param name="end">The end point of the line in world space.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <param name="layerMask">The filter used to detect Colliders only on certain layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.Linecast(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.ContactFilter2D,UnityEngine.RaycastHit2D[])">
      <summary>
        <para>Casts a line segment against colliders in the PhysicsScene2D.</para>
      </summary>
      <param name="start">The start point of the line in world space.</param>
      <param name="end">The end point of the line in world space.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <param name="layerMask">The filter used to detect Colliders only on certain layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.Linecast(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.RaycastHit2D&gt;)">
      <summary>
        <para>Casts a line segment against Colliders in the PhysicsScene2D.</para>
      </summary>
      <param name="start">The start point of the line in world space.</param>
      <param name="end">The end point of the line in world space.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="results">The listto receive results.</param>
      <returns>
        <para>Returns the number of results placed in the results list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.OverlapArea(UnityEngine.Vector2,UnityEngine.Vector2,System.Int32)">
      <summary>
        <para>Checks an area (non-rotated box) against Colliders in the PhysicsScene2D, returning the first intersection only.</para>
      </summary>
      <param name="pointA">One corner of the rectangle.</param>
      <param name="pointB">The corner of the rectangle diagonally opposite the pointA corner.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.</param>
      <returns>
        <para>The collider overlapping the area.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.OverlapArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.ContactFilter2D)">
      <summary>
        <para>Checks an area (non-rotated box) against Colliders in the PhysicsScene2D, returning the first intersection only.</para>
      </summary>
      <param name="pointA">One corner of the rectangle.</param>
      <param name="pointB">The corner of the rectangle diagonally opposite the pointA corner.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.</param>
      <returns>
        <para>The collider overlapping the area.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.OverlapArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Collider2D[],System.Int32)">
      <summary>
        <para>Checks an area (non-rotated box) against Colliders in the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="pointA">One corner of the rectangle.</param>
      <param name="pointB">The corner of the rectangle diagonally opposite the pointA corner.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.OverlapArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.ContactFilter2D,UnityEngine.Collider2D[])">
      <summary>
        <para>Checks an area (non-rotated box) against Colliders in the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="pointA">One corner of the rectangle.</param>
      <param name="pointB">The corner of the rectangle diagonally opposite the pointA corner.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.OverlapArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.Collider2D&gt;)">
      <summary>
        <para>Checks an area (non-rotated box) against Colliders in the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="pointA">One corner of the rectangle.</param>
      <param name="pointB">The corner of the rectangle diagonally opposite the pointA corner.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.</param>
      <param name="results">The list to receive results.</param>
      <returns>
        <para>Returns the number of results placed in the results list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.OverlapBox(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Int32)">
      <summary>
        <para>Checks a box against Colliders in the PhysicsScene2D, returning the first intersection only.</para>
      </summary>
      <param name="point">The center of the box.</param>
      <param name="size">The size of the box.</param>
      <param name="angle">The angle of the box.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.</param>
      <returns>
        <para>The collider overlapping the box.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.OverlapBox(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.ContactFilter2D)">
      <summary>
        <para>Checks a box against Colliders in the PhysicsScene2D, returning the first intersection only.</para>
      </summary>
      <param name="point">The center of the box.</param>
      <param name="size">The size of the box.</param>
      <param name="angle">The angle of the box.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.</param>
      <returns>
        <para>The collider overlapping the box.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.OverlapBox(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.Collider2D[],System.Int32)">
      <summary>
        <para>Checks a box against Colliders in the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="point">The center of the box.</param>
      <param name="size">The size of the box.</param>
      <param name="angle">The angle of the box.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.OverlapBox(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.ContactFilter2D,UnityEngine.Collider2D[])">
      <summary>
        <para>Checks a box against Colliders in the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="point">The center of the box.</param>
      <param name="size">The size of the box.</param>
      <param name="angle">The angle of the box.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.OverlapBox(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.Collider2D&gt;)">
      <summary>
        <para>Checks a box against Colliders in the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="point">The center of the box.</param>
      <param name="size">The size of the box.</param>
      <param name="angle">The angle of the box.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.</param>
      <param name="results">The list to receive results.</param>
      <returns>
        <para>Returns the number of results placed in the results list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.OverlapCapsule(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.CapsuleDirection2D,System.Single,System.Int32)">
      <summary>
        <para>Checks a capsule against Colliders in the PhysicsScene2D, returning the first intersection only.</para>
      </summary>
      <param name="point">The center of the capsule.</param>
      <param name="size">The size of the capsule.</param>
      <param name="direction">The direction of the capsule.</param>
      <param name="angle">The angle of the capsule.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.</param>
      <returns>
        <para>The collider overlapping the capsule.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.OverlapCapsule(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.CapsuleDirection2D,System.Single,UnityEngine.ContactFilter2D)">
      <summary>
        <para>Checks a capsule against Colliders in the PhysicsScene2D, returning the first intersection only.</para>
      </summary>
      <param name="point">The center of the capsule.</param>
      <param name="size">The size of the capsule.</param>
      <param name="direction">The direction of the capsule.</param>
      <param name="angle">The angle of the capsule.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.</param>
      <returns>
        <para>The collider overlapping the capsule.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.OverlapCapsule(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.CapsuleDirection2D,System.Single,UnityEngine.Collider2D[],System.Int32)">
      <summary>
        <para>Checks a capsule against Colliders in the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="point">The center of the capsule.</param>
      <param name="size">The size of the capsule.</param>
      <param name="direction">The direction of the capsule.</param>
      <param name="angle">The angle of the capsule.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.OverlapCapsule(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.CapsuleDirection2D,System.Single,UnityEngine.ContactFilter2D,UnityEngine.Collider2D[])">
      <summary>
        <para>Checks a capsule against Colliders in the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="point">The center of the capsule.</param>
      <param name="size">The size of the capsule.</param>
      <param name="direction">The direction of the capsule.</param>
      <param name="angle">The angle of the capsule.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.OverlapCapsule(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.CapsuleDirection2D,System.Single,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.Collider2D&gt;)">
      <summary>
        <para>Checks a capsule against Colliders in the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="point">The center of the capsule.</param>
      <param name="size">The size of the capsule.</param>
      <param name="direction">The direction of the capsule.</param>
      <param name="angle">The angle of the capsule.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.</param>
      <param name="results">The list to receive results.</param>
      <returns>
        <para>Returns the number of results placed in the results list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.OverlapCircle(UnityEngine.Vector2,System.Single,System.Int32)">
      <summary>
        <para>Checks a circle against Colliders in the PhysicsScene2D, returning the first intersection only.</para>
      </summary>
      <param name="point">The centre of the circle.</param>
      <param name="radius">The radius of the circle.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.</param>
      <returns>
        <para>The collider overlapping the circle.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.OverlapCircle(UnityEngine.Vector2,System.Single,UnityEngine.ContactFilter2D)">
      <summary>
        <para>Checks a circle against Colliders in the PhysicsScene2D, returning the first intersection only.</para>
      </summary>
      <param name="point">The centre of the circle.</param>
      <param name="radius">The radius of the circle.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.</param>
      <returns>
        <para>The collider overlapping the circle.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.OverlapCircle(UnityEngine.Vector2,System.Single,UnityEngine.Collider2D[],System.Int32)">
      <summary>
        <para>Checks a circle against Colliders in the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="point">The centre of the circle.</param>
      <param name="radius">The radius of the circle.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.OverlapCircle(UnityEngine.Vector2,System.Single,UnityEngine.ContactFilter2D,UnityEngine.Collider2D[])">
      <summary>
        <para>Checks a circle against Colliders in the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="point">The centre of the circle.</param>
      <param name="radius">The radius of the circle.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.OverlapCircle(UnityEngine.Vector2,System.Single,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.Collider2D&gt;)">
      <summary>
        <para>Checks a circle against Colliders in the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="point">The centre of the circle.</param>
      <param name="radius">The radius of the circle.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.</param>
      <param name="results">The list to receive results.</param>
      <returns>
        <para>Returns the number of results placed in the results list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.OverlapCollider(UnityEngine.Collider2D,UnityEngine.Collider2D[],System.Int32)">
      <summary>
        <para>Checks a Collider against Colliders in the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="collider">The Collider that defines the area used to query for other Collider overlaps.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.OverlapCollider(UnityEngine.Collider2D,UnityEngine.ContactFilter2D,UnityEngine.Collider2D[])">
      <summary>
        <para>Checks a Collider against Colliders in the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="collider">The Collider that defines the area used to query for other Collider overlaps.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.OverlapCollider(UnityEngine.Collider2D,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.Collider2D&gt;)">
      <summary>
        <para>Checks a Collider against Colliders in the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="collider">The Collider that defines the area used to query for other Collider overlaps.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.</param>
      <param name="results">The list to receive results.</param>
      <returns>
        <para>Returns the number of results placed in the results list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.OverlapPoint(UnityEngine.Vector2,System.Int32)">
      <summary>
        <para>Checks a point against Colliders in the PhysicsScene2D, returning the first intersection only.</para>
      </summary>
      <param name="point">A point in world space.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.</param>
      <returns>
        <para>The collider overlapping the point.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.OverlapPoint(UnityEngine.Vector2,UnityEngine.ContactFilter2D)">
      <summary>
        <para>Checks a point against Colliders in the PhysicsScene2D, returning the first intersection only.</para>
      </summary>
      <param name="point">A point in world space.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.</param>
      <returns>
        <para>The collider overlapping the point.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.OverlapPoint(UnityEngine.Vector2,UnityEngine.Collider2D[],System.Int32)">
      <summary>
        <para>Checks a point against Colliders in the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="point">A point in world space.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.OverlapPoint(UnityEngine.Vector2,UnityEngine.ContactFilter2D,UnityEngine.Collider2D[])">
      <summary>
        <para>Checks a point against Colliders in the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="point">A point in world space.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.OverlapPoint(UnityEngine.Vector2,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.Collider2D&gt;)">
      <summary>
        <para>Checks a point against Colliders in the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="point">A point in world space.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.</param>
      <param name="results">The list to receive results.</param>
      <returns>
        <para>Returns the number of results placed in the results list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.Raycast(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Int32)">
      <summary>
        <para>Casts a ray against colliders in the PhysicsScene2D, returning the first intersection only.</para>
      </summary>
      <param name="origin">The point in 2D space where the ray originates.</param>
      <param name="direction">The vector representing the direction of the ray.</param>
      <param name="distance">Maximum distance over which to cast the ray.</param>
      <param name="layerMask">The filter used to detect Colliders only on certain layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth, or normal angle.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.Raycast(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.ContactFilter2D)">
      <summary>
        <para>Casts a ray against colliders in the PhysicsScene2D, returning the first intersection only.</para>
      </summary>
      <param name="origin">The point in 2D space where the ray originates.</param>
      <param name="direction">The vector representing the direction of the ray.</param>
      <param name="distance">Maximum distance over which to cast the ray.</param>
      <param name="layerMask">The filter used to detect Colliders only on certain layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth, or normal angle.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.Raycast(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.RaycastHit2D[],System.Int32)">
      <summary>
        <para>Casts a ray against colliders the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="origin">The point in 2D space where the ray originates.</param>
      <param name="direction">The vector representing the direction of the ray.</param>
      <param name="distance">Maximum distance over which to cast the ray.</param>
      <param name="layerMask">The filter used to detect Colliders only on certain layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth, or normal angle.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.Raycast(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.ContactFilter2D,UnityEngine.RaycastHit2D[])">
      <summary>
        <para>Casts a ray against colliders the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="origin">The point in 2D space where the ray originates.</param>
      <param name="direction">The vector representing the direction of the ray.</param>
      <param name="distance">Maximum distance over which to cast the ray.</param>
      <param name="layerMask">The filter used to detect Colliders only on certain layers.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth, or normal angle.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.Raycast(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.RaycastHit2D&gt;)">
      <summary>
        <para>Casts a ray against Colliders the PhysicsScene2D, returning all intersections.</para>
      </summary>
      <param name="origin">The point in 2D space where the ray originates.</param>
      <param name="direction">The vector representing the direction of the ray.</param>
      <param name="distance">Maximum distance over which to cast the ray.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask and Z depth, or normal angle.</param>
      <param name="results">The list to receive results.</param>
      <returns>
        <para>Returns the number of results placed in the results list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsScene2D.Simulate(System.Single)">
      <summary>
        <para>Simulate physics associated with this PhysicsScene.</para>
      </summary>
      <param name="step">The time to advance physics by.</param>
      <returns>
        <para>Whether the simulation was run or not.  Running the simulation during physics callbacks will always fail.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.PhysicsSceneExtensions2D">
      <summary>
        <para>Scene extensions to access the underlying physics scene.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.PhysicsSceneExtensions2D.GetPhysicsScene2D(UnityEngine.SceneManagement.Scene)">
      <summary>
        <para>An extension method that returns the 2D physics Scene from the Scene.</para>
      </summary>
      <param name="scene">The Scene from which to return the 2D physics Scene.</param>
      <returns>
        <para>The 2D physics Scene used by the Scene.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.PhysicsShape2D">
      <summary>
        <para>Represents an efficient low-level physics shape used by the physics engine.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsShape2D.adjacentEnd">
      <summary>
        <para>Defines the position of a virtual point adjacent to the end vertex of an edge shape.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsShape2D.adjacentStart">
      <summary>
        <para>Defines the position of a virtual point adjacent to the start vertex of an edge shape.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsShape2D.radius">
      <summary>
        <para>The radius of the shape.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsShape2D.shapeType">
      <summary>
        <para>The shape type determines how the vertices and radius are used by this PhysicsShape2D.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsShape2D.useAdjacentEnd">
      <summary>
        <para>When the value is true, then the shape will use the PhysicsShape2D.adjacentEnd|adjacentEnd feature. When the value is false, then the shape will not use the PhysicsShape2D.adjacentEnd|adjacentEnd feature.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsShape2D.useAdjacentStart">
      <summary>
        <para>When the value is true, then the shape will use the PhysicsShape2D.adjacentStart|adjacentStart feature. When the value is false, then the shape will not use the PhysicsShape2D.adjacentEnd|adjacentStart feature.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsShape2D.vertexCount">
      <summary>
        <para>The total number of vertices used to represent the PhysicsShape2D.shapeType|shape type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsShape2D.vertexStartIndex">
      <summary>
        <para>The start index for the geometry of this shape within the PhysicsShapeGroup2D.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PhysicsShapeGroup2D">
      <summary>
        <para>Represents a group of PhysicsShape2D and their geometry.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsShapeGroup2D.localToWorldMatrix">
      <summary>
        <para>Gets or sets a matrix that transforms the PhysicsShapeGroup2D vertices from local space into world space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsShapeGroup2D.shapeCount">
      <summary>
        <para>The total number of  PhysicsShape2D in the shape group. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsShapeGroup2D.vertexCount">
      <summary>
        <para>The total number of vertices in the shape group used to represent all PhysicsShape2D within it. (Read Only)</para>
      </summary>
    </member>
    <member name="M:UnityEngine.PhysicsShapeGroup2D.Add(UnityEngine.PhysicsShapeGroup2D)">
      <summary>
        <para>Adds a copy of all the PhysicsShape2D and their geometry from the specified physicsShapeGroup into this shape group. The specified physicsShapeGroup is not modified.</para>
      </summary>
      <param name="physicsShapeGroup">The PhysicsShapeGroup2D to add to this shape group. (Read Only)</param>
    </member>
    <member name="M:UnityEngine.PhysicsShapeGroup2D.AddBox(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Single)">
      <summary>
        <para>Adds a box shape (PhysicsShapeType2D.Polygon) to the shape group.</para>
      </summary>
      <param name="center">The center point of the box shape. This is analogous to Collider2D.offset.</param>
      <param name="size">The size of the box. This is identical to BoxCollider2D.size.</param>
      <param name="angle">The angle in degrees the box should be rotated around the center.</param>
      <param name="edgeRadius">The radius extending around the edges of the box. This is identical to BoxCollider2D.edgeRadius.</param>
      <returns>
        <para>Returns the shape index the shape was added to in the PhysicsShapeGroup2D. This index is used as the main reference when retrieving a shape.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsShapeGroup2D.AddCapsule(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
      <summary>
        <para>Adds a capsule shape (PhysicsShapeType2D.Capsule) to the shape group.</para>
      </summary>
      <param name="vertex0">The position of one end of a capsule shape. This point represents the center point of a logical circle at the end of a capsule.</param>
      <param name="vertex1">The position of the opposite end of a capsule shape. This point represents the  center point of a logical circle at the opposite end of a capsule.</param>
      <param name="radius">The radius of the capsule defining a radius around the vertex0 and vertex1 and the area between them.</param>
      <returns>
        <para>Returns the shape index the shape was added to in the PhysicsShapeGroup2D. This index is used as the main reference when retrieving a shape.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsShapeGroup2D.AddCircle(UnityEngine.Vector2,System.Single)">
      <summary>
        <para>Adds a circle shape (PhysicsShapeType2D.Circle) to the shape group.</para>
      </summary>
      <param name="center">The center point of the circle shape. This is analogous to Collider2D.offset.</param>
      <param name="radius">The radius of the circle defining a radius around the center. This is identical to CircleCollider2D.radius.</param>
      <returns>
        <para>Returns the shape index the shape was added to in the PhysicsShapeGroup2D. This index is used as the main reference when retrieving a shape.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsShapeGroup2D.AddEdges(System.Collections.Generic.List`1&lt;UnityEngine.Vector2&gt;,System.Single)">
      <summary>
        <para>Adds an edges shape (PhysicsShapeType2D.Edges) to the shape group.</para>
      </summary>
      <param name="vertices">A list of vertices that represent a continuous set of edges with each vertex connecting to the following vertex to form each edge.</param>
      <param name="edgeRadius">The radius extending around each edge. This is identical to EdgeCollider2D.edgeRadius.</param>
      <returns>
        <para>Returns the shape index the shape was added to in the PhysicsShapeGroup2D. This index is used as the main reference when retrieving a shape.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsShapeGroup2D.AddEdges(System.Collections.Generic.List`1&lt;UnityEngine.Vector2&gt;,System.Boolean,System.Boolean,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
      <summary>
        <para>Adds an edge shape (PhysicsShapeType2D.Edges) to the shape group supporting adjacent start and end vertices.</para>
      </summary>
      <param name="vertices">A list of vertices that represent a continuous set of edges with each vertex connecting to the following vertex to form each edge.</param>
      <param name="edgeRadius">The radius extending around each edge. This is identical to EdgeCollider2D.edgeRadius.</param>
      <param name="useAdjacentStart">When the value is true, the adjacentStart argument is used. When the value is false, the adjacentStart argument is not used.</param>
      <param name="useAdjacentEnd">When the value is true, the adjacentEnd argument is used. When the value is false, the adjacentEnd argument is not used.</param>
      <param name="adjacentStart">Defines the position of a virtual point adjacent to the start vertex of an edge shape.</param>
      <param name="adjacentEnd">Defines the position of a virtual point adjacent to the end vertex of an edge shape.</param>
      <returns>
        <para>Returns the shape index the shape was added to in the PhysicsShapeGroup2D. This index is used as the main reference when retrieving a shape.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsShapeGroup2D.AddPolygon(System.Collections.Generic.List`1&lt;UnityEngine.Vector2&gt;)">
      <summary>
        <para>Adds a polygon shape (PhysicsShapeType2D.Polygon) to the shape group.</para>
      </summary>
      <param name="vertices">A list of vertices that represent a continuous set of edges of a convex polygon with each vertex connecting to the following vertex to form each edge. The final vertex implicitly connects to the first vertex. The maximum allowed list length is defined by Physics2D.MaxPolygonShapeVertices.</param>
      <returns>
        <para>Returns the shape index the shape was added to in the PhysicsShapeGroup2D. This index is used as the main reference when retrieving a shape.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsShapeGroup2D.Clear">
      <summary>
        <para>Clears all the vertices and shapes from the PhysicsShapeGroup.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.PhysicsShapeGroup2D.#ctor(System.Int32,System.Int32)">
      <summary>
        <para>Initializes and returns an instance of PhysicsShapeGroup2D. The shape group will be empty and ready for use by Collider2D.GetShapes, Rigidbody2D.GetShapes or manually adding shapes.</para>
      </summary>
      <param name="shapeCapacity">The initial capacity of the PhysicsShape2D list used to contain the shapes.</param>
      <param name="vertexCapacity">The initial capacity of the Vector2|vertices list used to contain the shape geometry.</param>
    </member>
    <member name="M:UnityEngine.PhysicsShapeGroup2D.DeleteShape(System.Int32)">
      <summary>
        <para>When destroying a shape at the specified shapeIndex, all other shapes that exist above the specified shapeIndex will have their shape indices updated appropriately.</para>
      </summary>
      <param name="shapeIndex">The index of the shape stored the PhysicsShapeGroup2D.</param>
    </member>
    <member name="M:UnityEngine.PhysicsShapeGroup2D.GetShape(System.Int32)">
      <summary>
        <para>Gets the PhysicsShape2D stored at the specified shapeIndex.</para>
      </summary>
      <param name="shapeIndex">The index of the shape stored the PhysicsShapeGroup2D. The shape index is zero-based with the shape group having a quantity of shapes specified by PhysicsShapeGroup2D.shapeCount|shapeCount.</param>
      <returns>
        <para>Returns the shape stored at the specified shapeIndex.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsShapeGroup2D.GetShapeData(System.Collections.Generic.List`1&lt;UnityEngine.PhysicsShape2D&gt;,System.Collections.Generic.List`1&lt;UnityEngine.Vector2&gt;)">
      <summary>
        <para>Gets a copy of both the shapes and vertices in the PhysicsShapeGroup2D.</para>
      </summary>
      <param name="shapes">A list that will be populated with a copy of all the shapes in the PhysicsShapeGroup2D.</param>
      <param name="vertices">A list that will be populated with a copy of all the vertices in the PhysicsShapeGroup2D.</param>
    </member>
    <member name="M:UnityEngine.PhysicsShapeGroup2D.GetShapeData(Unity.Collections.NativeArray`1&lt;UnityEngine.PhysicsShape2D&gt;,Unity.Collections.NativeArray`1&lt;UnityEngine.Vector2&gt;)">
      <summary>
        <para>Gets a copy of both the shapes and vertices in the PhysicsShapeGroup2D.</para>
      </summary>
      <param name="shapes">A NativeArray that will be populated with a copy of all the shapes in the PhysicsShapeGroup2D.</param>
      <param name="vertices">A NativeArray that will be populated with a copy of all the vertices in the PhysicsShapeGroup2D.</param>
    </member>
    <member name="M:UnityEngine.PhysicsShapeGroup2D.GetShapeVertex(System.Int32,System.Int32)">
      <summary>
        <para>Gets a single vertex of a shape. The vertex index is zero-based with the shape having a quantity of vertex specified by PhysicsShape2D.vertexCount.</para>
      </summary>
      <param name="shapeIndex">The index of the shape stored in the PhysicsShapeGroup2D. The shape index is zero-based with the shape group having a quantity of shapes specified by PhysicsShapeGroup2D.shapeCount|shapeCount.</param>
      <param name="vertexIndex">The index of the shape vertex stored in the PhysicsShapeGroup2D. The vertex index is zero-based with the shape having a quantity of vertex specified by PhysicsShape2D.vertexCount.</param>
      <returns>
        <para>Returns the specified shape vertex.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PhysicsShapeGroup2D.GetShapeVertices(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Vector2&gt;)">
      <summary>
        <para>Gets a copy of the shape vertices in the PhysicsShapeGroup2D.</para>
      </summary>
      <param name="shapeIndex">The index of the shape stored in the PhysicsShapeGroup2D. The shape index is zero-based with the shape group having a quantity of shapes specified by PhysicsShapeGroup2D.shapeCount|shapeCount.</param>
      <param name="vertices">A list that will be populated with a copy of all the shape vertices in the PhysicsShapeGroup2D.</param>
    </member>
    <member name="M:UnityEngine.PhysicsShapeGroup2D.SetShapeAdjacentVertices(System.Int32,System.Boolean,System.Boolean,UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Sets the adjacent vertices of a shape.</para>
      </summary>
      <param name="shapeIndex">The index of the shape to be modified that is stored the PhysicsShapeGroup2D.</param>
      <param name="useAdjacentStart">Sets the PhysicsShape2D.useAdjacentStart property of the selected shape.</param>
      <param name="useAdjacentEnd">Sets the PhysicsShape2D.useAdjacentEnd property of the selected shape.</param>
      <param name="adjacentStart">Sets the PhysicsShape2D.adjacentStart property of the selected shape.</param>
      <param name="adjacentEnd">Sets the PhysicsShape2D.adjacentEnd property of the selected shape.</param>
    </member>
    <member name="M:UnityEngine.PhysicsShapeGroup2D.SetShapeRadius(System.Int32,System.Single)">
      <summary>
        <para>Sets the radius of a shape.</para>
      </summary>
      <param name="shapeIndex">The index of the shape stored in the PhysicsShapeGroup2D. The shape index is zero-based with the shape group having a quantity of shapes specified by PhysicsShapeGroup2D.shapeCount|shapeCount.</param>
      <param name="radius">The value to set the shape radius to.</param>
    </member>
    <member name="M:UnityEngine.PhysicsShapeGroup2D.SetShapeVertex(System.Int32,System.Int32,UnityEngine.Vector2)">
      <summary>
        <para>Sets a single vertex of a shape.</para>
      </summary>
      <param name="shapeIndex">The index of the shape stored in the PhysicsShapeGroup2D. The shape index is zero-based with the shape group having a quantity of shapes specified by PhysicsShapeGroup2D.shapeCount|shapeCount.</param>
      <param name="vertexIndex">The index of the shape vertex stored in the PhysicsShapeGroup2D. The vertex index is zero-based with the shape having a quantity of vertex specified by PhysicsShape2D.vertexCount.</param>
      <param name="vertex">The value to set the shape vertex to.</param>
    </member>
    <member name="T:UnityEngine.PhysicsShapeType2D">
      <summary>
        <para>Options for indicate which primitive shape type is used to interpret geometry contained within a PhysicsShape2D object.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.PhysicsShapeType2D.Capsule">
      <summary>
        <para>Use a capsule shape to interpret the PhysicsShape2D geometry.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.PhysicsShapeType2D.Circle">
      <summary>
        <para>Use a circle shape to interpret the PhysicsShape2D geometry.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.PhysicsShapeType2D.Edges">
      <summary>
        <para>Use multiple edges to interpret the PhysicsShape2D geometry.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.PhysicsShapeType2D.Polygon">
      <summary>
        <para>Use a convex polygon shape to interpret the PhysicsShape2D geometry.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PhysicsUpdateBehaviour2D">
      <summary>
        <para>A base type for 2D physics components that required a callback during FixedUpdate.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlatformEffector2D">
      <summary>
        <para>Applies "platform" behaviour such as one-way collisions etc.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PlatformEffector2D.oneWay">
      <summary>
        <para>Whether to use one-way collision behaviour or not.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PlatformEffector2D.rotationalOffset">
      <summary>
        <para>The rotational offset angle from the local 'up'.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PlatformEffector2D.sideAngleVariance">
      <summary>
        <para>The angle variance centered on the sides of the platform.  Zero angle only matches sides 90-degree to the platform "top".</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PlatformEffector2D.sideArc">
      <summary>
        <para>The angle of an arc that defines the sides of the platform centered on the local 'left' and 'right' of the effector. Any collision normals within this arc are considered for the 'side' behaviours.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PlatformEffector2D.sideBounce">
      <summary>
        <para>Whether bounce should be used on the platform sides or not.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PlatformEffector2D.sideFriction">
      <summary>
        <para>Whether friction should be used on the platform sides or not.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PlatformEffector2D.surfaceArc">
      <summary>
        <para>The angle of an arc that defines the surface of the platform centered of the local 'up' of the effector.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PlatformEffector2D.useOneWay">
      <summary>
        <para>Should the one-way collision behaviour be used?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PlatformEffector2D.useOneWayGrouping">
      <summary>
        <para>Ensures that all contacts controlled by the one-way behaviour act the same.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PlatformEffector2D.useSideBounce">
      <summary>
        <para>Should bounce be used on the platform sides?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PlatformEffector2D.useSideFriction">
      <summary>
        <para>Should friction be used on the platform sides?</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PointEffector2D">
      <summary>
        <para>Applies forces to attract/repulse against a point.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PointEffector2D.angularDrag">
      <summary>
        <para>The angular drag to apply to rigid-bodies.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PointEffector2D.distanceScale">
      <summary>
        <para>The scale applied to the calculated distance between source and target.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PointEffector2D.drag">
      <summary>
        <para>The linear drag to apply to rigid-bodies.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PointEffector2D.forceMagnitude">
      <summary>
        <para>The magnitude of the force to be applied.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PointEffector2D.forceMode">
      <summary>
        <para>The mode used to apply the effector force.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PointEffector2D.forceSource">
      <summary>
        <para>The source which is used to calculate the centroid point of the effector.  The distance from the target is defined from this point.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PointEffector2D.forceTarget">
      <summary>
        <para>The target for where the effector applies any force.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PointEffector2D.forceVariation">
      <summary>
        <para>The variation of the magnitude of the force to be applied.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PolygonCollider2D">
      <summary>
        <para>Collider for 2D physics representing an arbitrary polygon defined by its vertices.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PolygonCollider2D.autoTiling">
      <summary>
        <para>Determines whether the PolygonCollider2D's shape is automatically updated based on a SpriteRenderer's tiling properties.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PolygonCollider2D.pathCount">
      <summary>
        <para>The number of paths in the polygon.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PolygonCollider2D.points">
      <summary>
        <para>Corner points that define the collider's shape in local space.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.PolygonCollider2D.CreatePrimitive(System.Int32,UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Creates as regular primitive polygon with the specified number of sides.</para>
      </summary>
      <param name="sides">The number of sides in the polygon.  This must be greater than two.</param>
      <param name="scale">The X/Y scale of the polygon.  These must be greater than zero.</param>
      <param name="offset">The X/Y offset of the polygon.</param>
    </member>
    <member name="M:UnityEngine.PolygonCollider2D.GetPath(System.Int32)">
      <summary>
        <para>Gets a path from the Collider by its index.</para>
      </summary>
      <param name="index">The index of the path to retrieve.</param>
      <returns>
        <para>An ordered array of the vertices (points) in the selected path.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PolygonCollider2D.GetPath(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Vector2&gt;)">
      <summary>
        <para>Gets a path from the Collider by its index.</para>
      </summary>
      <param name="index">The index of the path to retrieve.</param>
      <param name="points">An ordered list of the vertices (points) in the selected path.</param>
      <returns>
        <para>Returns the number of results placed in the points list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.PolygonCollider2D.GetTotalPointCount">
      <summary>
        <para>Return the total number of points in the polygon in all paths.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.PolygonCollider2D.SetPath(System.Int32,UnityEngine.Vector2[])">
      <summary>
        <para>Define a path by its constituent points.</para>
      </summary>
      <param name="index">Index of the path to set.</param>
      <param name="points">An ordered array of the vertices (points) that define the path.</param>
    </member>
    <member name="M:UnityEngine.PolygonCollider2D.SetPath(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Vector2&gt;)">
      <summary>
        <para>Define a path by its constituent points.</para>
      </summary>
      <param name="index">Index of the path to set.</param>
      <param name="points">An ordered list of the vertices (points) that define the path.</param>
    </member>
    <member name="T:UnityEngine.RaycastHit2D">
      <summary>
        <para>Information returned about an object detected by a raycast in 2D physics.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RaycastHit2D.centroid">
      <summary>
        <para>The centroid of the primitive used to perform the cast.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RaycastHit2D.collider">
      <summary>
        <para>The collider hit by the ray.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RaycastHit2D.distance">
      <summary>
        <para>The distance from the ray origin to the impact point.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RaycastHit2D.fraction">
      <summary>
        <para>Fraction of the distance along the ray that the hit occurred.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RaycastHit2D.normal">
      <summary>
        <para>The normal vector of the surface hit by the ray.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RaycastHit2D.point">
      <summary>
        <para>The point in world space where the ray hit the collider's surface.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RaycastHit2D.rigidbody">
      <summary>
        <para>The Rigidbody2D attached to the object that was hit.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RaycastHit2D.transform">
      <summary>
        <para>The Transform of the object that was hit.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RelativeJoint2D">
      <summary>
        <para>Keeps two Rigidbody2D at their relative orientations.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RelativeJoint2D.angularOffset">
      <summary>
        <para>The current angular offset between the Rigidbody2D that the joint connects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RelativeJoint2D.autoConfigureOffset">
      <summary>
        <para>Should both the linearOffset and angularOffset be calculated automatically?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RelativeJoint2D.correctionScale">
      <summary>
        <para>Scales both the linear and angular forces used to correct the required relative orientation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RelativeJoint2D.linearOffset">
      <summary>
        <para>The current linear offset between the Rigidbody2D that the joint connects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RelativeJoint2D.maxForce">
      <summary>
        <para>The maximum force that can be generated when trying to maintain the relative joint constraint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RelativeJoint2D.maxTorque">
      <summary>
        <para>The maximum torque that can be generated when trying to maintain the relative joint constraint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RelativeJoint2D.target">
      <summary>
        <para>The world-space position that is currently trying to be maintained.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rigidbody2D">
      <summary>
        <para>Rigidbody physics component for 2D sprites.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.angularDrag">
      <summary>
        <para>Coefficient of angular drag.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.angularVelocity">
      <summary>
        <para>Angular velocity in degrees per second.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.attachedColliderCount">
      <summary>
        <para>Returns the number of Collider2D attached to this Rigidbody2D.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.bodyType">
      <summary>
        <para>The physical behaviour type of the Rigidbody2D.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.centerOfMass">
      <summary>
        <para>The center of mass of the rigidBody in local space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.collisionDetectionMode">
      <summary>
        <para>The method used by the physics engine to check if two objects have collided.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.constraints">
      <summary>
        <para>Controls which degrees of freedom are allowed for the simulation of this Rigidbody2D.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.drag">
      <summary>
        <para>Coefficient of drag.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.fixedAngle">
      <summary>
        <para>Should the rigidbody be prevented from rotating?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.freezeRotation">
      <summary>
        <para>Controls whether physics will change the rotation of the object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.gravityScale">
      <summary>
        <para>The degree to which this object is affected by gravity.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.inertia">
      <summary>
        <para>The Rigidbody's resistance to changes in angular velocity (rotation).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.interpolation">
      <summary>
        <para>Physics interpolation used between updates.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.isKinematic">
      <summary>
        <para>Should this rigidbody be taken out of physics control?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.mass">
      <summary>
        <para>Mass of the Rigidbody.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.position">
      <summary>
        <para>The position of the rigidbody.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.rotation">
      <summary>
        <para>The rotation of the rigidbody.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.sharedMaterial">
      <summary>
        <para>The PhysicsMaterial2D that is applied to all Collider2D attached to this Rigidbody2D.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.simulated">
      <summary>
        <para>Indicates whether the rigid body should be simulated or not by the physics system.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.sleepMode">
      <summary>
        <para>The sleep state that the rigidbody will initially be in.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.useAutoMass">
      <summary>
        <para>Should the total rigid-body mass be automatically calculated from the Collider2D.density of attached colliders?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.useFullKinematicContacts">
      <summary>
        <para>Should kinematickinematic and kinematicstatic collisions be allowed?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.velocity">
      <summary>
        <para>Linear velocity of the Rigidbody in units per second.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.worldCenterOfMass">
      <summary>
        <para>Gets the center of mass of the rigidBody in global space.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.AddForce(UnityEngine.Vector2,UnityEngine.ForceMode2D)">
      <summary>
        <para>Apply a force to the rigidbody.</para>
      </summary>
      <param name="force">Components of the force in the X and Y axes.</param>
      <param name="mode">The method used to apply the specified force.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.AddForceAtPosition(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.ForceMode2D)">
      <summary>
        <para>Apply a force at a given position in space.</para>
      </summary>
      <param name="force">Components of the force in the X and Y axes.</param>
      <param name="position">Position in world space to apply the force.</param>
      <param name="mode">The method used to apply the specified force.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.AddRelativeForce(UnityEngine.Vector2,UnityEngine.ForceMode2D)">
      <summary>
        <para>Adds a force to the rigidbody2D relative to its coordinate system.</para>
      </summary>
      <param name="relativeForce">Components of the force in the X and Y axes.</param>
      <param name="mode">The method used to apply the specified force.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.AddTorque(System.Single,UnityEngine.ForceMode2D)">
      <summary>
        <para>Apply a torque at the rigidbody's centre of mass.</para>
      </summary>
      <param name="torque">Torque to apply.</param>
      <param name="mode">The force mode to use.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.Cast(UnityEngine.Vector2,UnityEngine.RaycastHit2D[],System.Single)">
      <summary>
        <para>All the Collider2D shapes attached to the Rigidbody2D are cast into the Scene starting at each Collider position ignoring the Colliders attached to the same Rigidbody2D.</para>
      </summary>
      <param name="direction">Vector representing the direction to cast each Collider2D shape.</param>
      <param name="results">Array to receive results.</param>
      <param name="distance">Maximum distance over which to cast the Collider(s).</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.Cast(UnityEngine.Vector2,UnityEngine.ContactFilter2D,UnityEngine.RaycastHit2D[],System.Single)">
      <summary>
        <para>All the Collider2D shapes attached to the Rigidbody2D are cast into the Scene starting at each Collider position ignoring the Colliders attached to the same Rigidbody2D.</para>
      </summary>
      <param name="direction">Vector representing the direction to cast each Collider2D shape.</param>
      <param name="contactFilter">Filter results defined by the contact filter.</param>
      <param name="results">Array to receive results.</param>
      <param name="distance">Maximum distance over which to cast the Collider(s).</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.Cast(UnityEngine.Vector2,System.Collections.Generic.List`1&lt;UnityEngine.RaycastHit2D&gt;,System.Single)">
      <summary>
        <para>All the Collider2D shapes attached to the Rigidbody2D are cast into the Scene starting at each Collider position ignoring the Colliders attached to the same Rigidbody2D.</para>
      </summary>
      <param name="direction">Vector representing the direction to cast each Collider2D shape.</param>
      <param name="results">List to receive results.</param>
      <param name="distance">Maximum distance over which to cast the Collider(s).</param>
      <returns>
        <para>Returns the number of results placed in the results list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.Cast(UnityEngine.Vector2,UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.RaycastHit2D&gt;,System.Single)">
      <summary>
        <para>All the Collider2D shapes attached to the Rigidbody2D are cast into the Scene starting at each Collider position ignoring the Colliders attached to the same Rigidbody2D.</para>
      </summary>
      <param name="direction">Vector representing the direction to cast each Collider2D shape.</param>
      <param name="contactFilter">Filter results defined by the contact filter.</param>
      <param name="results">List to receive results.</param>
      <param name="distance">Maximum distance over which to cast the Collider(s).</param>
      <returns>
        <para>Returns the number of results placed in the results list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.ClosestPoint(UnityEngine.Vector2)">
      <summary>
        <para>Returns a point on the perimeter of all enabled Colliders attached to this Rigidbody that is closest to the specified position.</para>
      </summary>
      <param name="position">The position from which to find the closest point on this Rigidbody.</param>
      <returns>
        <para>A point on the perimeter of a Collider attached to this rigidbody that is closest to the specified position.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.Distance(UnityEngine.Collider2D)">
      <summary>
        <para>Calculates the minimum distance of this collider against all Collider2D attached to this Rigidbody2D.</para>
      </summary>
      <param name="collider">A collider used to calculate the minimum distance against all colliders attached to this Rigidbody2D.</param>
      <returns>
        <para>The minimum distance of collider against all colliders attached to this Rigidbody2D.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.GetAttachedColliders(UnityEngine.Collider2D[])">
      <summary>
        <para>Returns all Collider2D that are attached to this Rigidbody2D.</para>
      </summary>
      <param name="results">An array of Collider2D used to receive the results.</param>
      <returns>
        <para>Returns the number of Collider2D placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.GetAttachedColliders(System.Collections.Generic.List`1&lt;UnityEngine.Collider2D&gt;)">
      <summary>
        <para>Returns all Collider2D that are attached to this Rigidbody2D.</para>
      </summary>
      <param name="results">A list of Collider2D used to receive the results.</param>
      <returns>
        <para>Returns the number of Collider2D placed in the results list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.GetContacts(UnityEngine.ContactPoint2D[])">
      <summary>
        <para>Retrieves all contact points for all of the Collider(s) attached to this Rigidbody.</para>
      </summary>
      <param name="contacts">An array of ContactPoint2D used to receive the results.</param>
      <returns>
        <para>Returns the number of contacts placed in the contacts array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.GetContacts(UnityEngine.Collider2D[])">
      <summary>
        <para>Retrieves all Colliders in contact with any of the Collider(s) attached to this Rigidbody.</para>
      </summary>
      <param name="colliders">An array of Collider2D used to receive the results.</param>
      <returns>
        <para>Returns the number of colliders placed in the colliders array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.GetContacts(UnityEngine.ContactFilter2D,UnityEngine.ContactPoint2D[])">
      <summary>
        <para>Retrieves all contact points for all of the Collider(s) attached to this Rigidbody, with the results filtered by the ContactFilter2D.</para>
      </summary>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="contacts">An array of ContactPoint2D used to receive the results.</param>
      <returns>
        <para>Returns the number of contacts placed in the contacts array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.GetContacts(UnityEngine.ContactFilter2D,UnityEngine.Collider2D[])">
      <summary>
        <para>Retrieves all Colliders in contact with any of the Collider(s) attached to this rigidbody, with the results filtered by the ContactFilter2D.</para>
      </summary>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="colliders">An array of Collider2D used to receive the results.</param>
      <returns>
        <para>Returns the number of colliders placed in the colliders array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.GetContacts(System.Collections.Generic.List`1&lt;UnityEngine.ContactPoint2D&gt;)">
      <summary>
        <para>Retrieves all contact points for all of the Collider(s) attached to this Rigidbody.</para>
      </summary>
      <param name="contacts">A list of ContactPoint2D used to receive the results.</param>
      <returns>
        <para>Returns the number of contacts placed in the contacts list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.GetContacts(UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.ContactPoint2D&gt;)">
      <summary>
        <para>Retrieves all contact points for all of the Collider(s) attached to this Rigidbody.</para>
      </summary>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="contacts">A list of ContactPoint2D used to receive the results.</param>
      <returns>
        <para>Returns the number of contacts placed in the contacts list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.GetContacts(System.Collections.Generic.List`1&lt;UnityEngine.Collider2D&gt;)">
      <summary>
        <para>Retrieves all Colliders in contact with any of the Collider(s) attached to this Rigidbody.</para>
      </summary>
      <param name="colliders">A list of Collider2D used to receive the results.</param>
      <returns>
        <para>Returns the number of Colliders placed in the colliders list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.GetContacts(UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.Collider2D&gt;)">
      <summary>
        <para>Retrieves all Colliders in contact with any of the Collider(s) attached to this Rigidbody.</para>
      </summary>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <param name="colliders">A list of Collider2D used to receive the results.</param>
      <returns>
        <para>Returns the number of Colliders placed in the colliders list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.GetPoint(UnityEngine.Vector2)">
      <summary>
        <para>Get a local space point given the point point in rigidBody global space.</para>
      </summary>
      <param name="point">The global space point to transform into local space.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.GetPointVelocity(UnityEngine.Vector2)">
      <summary>
        <para>The velocity of the rigidbody at the point Point in global space.</para>
      </summary>
      <param name="point">The global space point to calculate velocity for.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.GetRelativePoint(UnityEngine.Vector2)">
      <summary>
        <para>Get a global space point given the point relativePoint in rigidBody local space.</para>
      </summary>
      <param name="relativePoint">The local space point to transform into global space.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.GetRelativePointVelocity(UnityEngine.Vector2)">
      <summary>
        <para>The velocity of the rigidbody at the point Point in local space.</para>
      </summary>
      <param name="relativePoint">The local space point to calculate velocity for.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.GetRelativeVector(UnityEngine.Vector2)">
      <summary>
        <para>Get a global space vector given the vector relativeVector in rigidBody local space.</para>
      </summary>
      <param name="relativeVector">The local space vector to transform into a global space vector.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.GetShapes(UnityEngine.PhysicsShapeGroup2D)">
      <summary>
        <para>Gets all the PhysicsShape2D used by all Collider2D attached to the Rigidbody2D.</para>
      </summary>
      <param name="physicsShapeGroup">The PhysicsShapeGroup2D to store the retrieved PhysicsShape2D in.</param>
      <returns>
        <para>Returns the number of PhysicsShape2D retrieved from the Rigidbody2D.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.GetVector(UnityEngine.Vector2)">
      <summary>
        <para>Get a local space vector given the vector vector in rigidBody global space.</para>
      </summary>
      <param name="vector">The global space vector to transform into a local space vector.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.IsAwake">
      <summary>
        <para>Is the rigidbody "awake"?</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.IsSleeping">
      <summary>
        <para>Is the rigidbody "sleeping"?</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.IsTouching(UnityEngine.Collider2D)">
      <summary>
        <para>Checks whether the collider  is touching any of the collider(s) attached to this rigidbody or not.</para>
      </summary>
      <param name="collider">The collider to check if it is touching any of the collider(s) attached to this rigidbody.</param>
      <returns>
        <para>Whether the collider is touching any of the collider(s) attached to this rigidbody or not.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.IsTouching(UnityEngine.Collider2D,UnityEngine.ContactFilter2D)">
      <summary>
        <para>Checks whether the collider  is touching any of the collider(s) attached to this rigidbody or not with the results filtered by the ContactFilter2D.</para>
      </summary>
      <param name="collider">The collider to check if it is touching any of the collider(s) attached to this rigidbody.</param>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <returns>
        <para>Whether the collider is touching any of the collider(s) attached to this rigidbody or not.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.IsTouching(UnityEngine.ContactFilter2D)">
      <summary>
        <para>Checks whether any collider is touching any of the collider(s) attached to this rigidbody or not with the results filtered by the ContactFilter2D.</para>
      </summary>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.</param>
      <returns>
        <para>Whether any collider is touching any of the collider(s) attached to this rigidbody or not.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.IsTouchingLayers(System.Int32)">
      <summary>
        <para>Checks whether any of the collider(s) attached to this rigidbody are touching any colliders on the specified layerMask or not.</para>
      </summary>
      <param name="layerMask">Any colliders on any of these layers count as touching.</param>
      <returns>
        <para>Whether any of the collider(s) attached to this rigidbody are touching any colliders on the specified layerMask or not.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.MovePosition(UnityEngine.Vector2)">
      <summary>
        <para>Moves the rigidbody to position.</para>
      </summary>
      <param name="position">The new position for the Rigidbody object.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.MoveRotation(System.Single)">
      <summary>
        <para>Rotates the Rigidbody to angle (given in degrees).</para>
      </summary>
      <param name="angle">The new rotation angle for the Rigidbody object.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.MoveRotation(UnityEngine.Quaternion)">
      <summary>
        <para>An overload of MoveRotation that allows a full 3D rotation as an argument.</para>
      </summary>
      <param name="rotation">Full 3D rotation used to extract only the z-axis rotation.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.OverlapCollider(UnityEngine.ContactFilter2D,UnityEngine.Collider2D[])">
      <summary>
        <para>Get a list of all Colliders that overlap all Colliders attached to this Rigidbody2D.</para>
      </summary>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.</param>
      <param name="results">The array to receive results.  The size of the array determines the maximum number of results that can be returned.</param>
      <returns>
        <para>Returns the number of results placed in the results array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.OverlapCollider(UnityEngine.ContactFilter2D,System.Collections.Generic.List`1&lt;UnityEngine.Collider2D&gt;)">
      <summary>
        <para>Get a list of all Colliders that overlap all Colliders attached to this Rigidbody2D.</para>
      </summary>
      <param name="contactFilter">The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.</param>
      <param name="results">The list to receive results.</param>
      <returns>
        <para>Returns the number of results placed in the results list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.OverlapPoint(UnityEngine.Vector2)">
      <summary>
        <para>Check if any of the Rigidbody2D colliders overlap a point in space.</para>
      </summary>
      <param name="point">A point in world space.</param>
      <returns>
        <para>Whether the point overlapped any of the Rigidbody2D colliders.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.SetRotation(System.Single)">
      <summary>
        <para>Sets the rotation of the Rigidbody2D to angle (given in degrees).</para>
      </summary>
      <param name="angle">The rotation of the Rigidbody (in degrees).</param>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.SetRotation(UnityEngine.Quaternion)">
      <summary>
        <para>Sets the rotation of the Rigidbody2D to the z-axis rotation extracted from the full 3D rotation.</para>
      </summary>
      <param name="rotation">Full 3D rotation used to extract only the z-axis rotation.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.Sleep">
      <summary>
        <para>Make the rigidbody "sleep".</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.WakeUp">
      <summary>
        <para>Disables the "sleeping" state of a rigidbody.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RigidbodyConstraints2D">
      <summary>
        <para>Use these flags to constrain motion of the Rigidbody2D.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodyConstraints2D.FreezeAll">
      <summary>
        <para>Freeze rotation and motion along all axes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodyConstraints2D.FreezePosition">
      <summary>
        <para>Freeze motion along the X-axis and Y-axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodyConstraints2D.FreezePositionX">
      <summary>
        <para>Freeze motion along the X-axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodyConstraints2D.FreezePositionY">
      <summary>
        <para>Freeze motion along the Y-axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodyConstraints2D.FreezeRotation">
      <summary>
        <para>Freeze rotation along the Z-axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodyConstraints2D.None">
      <summary>
        <para>No constraints.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RigidbodyInterpolation2D">
      <summary>
        <para>Interpolation mode for Rigidbody2D objects.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodyInterpolation2D.Extrapolate">
      <summary>
        <para>Smooth an object's movement based on an estimate of its position in the next frame.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodyInterpolation2D.Interpolate">
      <summary>
        <para>Smooth movement based on the object's positions in previous frames.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodyInterpolation2D.None">
      <summary>
        <para>Do not apply any smoothing to the object's movement.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RigidbodySleepMode2D">
      <summary>
        <para>Settings for a Rigidbody2D's initial sleep state.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodySleepMode2D.NeverSleep">
      <summary>
        <para>Rigidbody2D never automatically sleeps.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodySleepMode2D.StartAsleep">
      <summary>
        <para>Rigidbody2D is initially asleep.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodySleepMode2D.StartAwake">
      <summary>
        <para>Rigidbody2D is initially awake.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RigidbodyType2D">
      <summary>
        <para>The physical behaviour type of the Rigidbody2D.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodyType2D.Dynamic">
      <summary>
        <para>Sets the Rigidbody2D to have dynamic behaviour.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodyType2D.Kinematic">
      <summary>
        <para>Sets the Rigidbody2D to have kinematic behaviour.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodyType2D.Static">
      <summary>
        <para>Sets the Rigidbody2D to have static behaviour.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SimulationMode2D">
      <summary>
        <para>A selection of modes that control when Unity executes the 2D physics simulation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SimulationMode2D.FixedUpdate">
      <summary>
        <para>Use this enumeration to specify to Unity that it should execute the physics simulation immediately after the MonoBehaviour.FixedUpdate.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SimulationMode2D.Script">
      <summary>
        <para>Use this enumeration to specify to Unity that it should execute the physics simulation manually when you call Physics2D.Simulate.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SimulationMode2D.Update">
      <summary>
        <para>Use this enumeration to specify to Unity that it should execute the physics simulation immediately after MonoBehaviour.Update.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SliderJoint2D">
      <summary>
        <para>Joint that restricts the motion of a Rigidbody2D object to a single line.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SliderJoint2D.angle">
      <summary>
        <para>The angle of the line in space (in degrees).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SliderJoint2D.autoConfigureAngle">
      <summary>
        <para>Should the angle be calculated automatically?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SliderJoint2D.jointSpeed">
      <summary>
        <para>The current joint speed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SliderJoint2D.jointTranslation">
      <summary>
        <para>The current joint translation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SliderJoint2D.limits">
      <summary>
        <para>Restrictions on how far the joint can slide in each direction along the line.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SliderJoint2D.limitState">
      <summary>
        <para>Gets the state of the joint limit.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SliderJoint2D.motor">
      <summary>
        <para>Parameters for a motor force that is applied automatically to the Rigibody2D along the line.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SliderJoint2D.referenceAngle">
      <summary>
        <para>The angle (in degrees) referenced between the two bodies used as the constraint for the joint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SliderJoint2D.useLimits">
      <summary>
        <para>Should motion limits be used?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SliderJoint2D.useMotor">
      <summary>
        <para>Should a motor force be applied automatically to the Rigidbody2D?</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SliderJoint2D.GetMotorForce(System.Single)">
      <summary>
        <para>Gets the motor force of the joint given the specified timestep.</para>
      </summary>
      <param name="timeStep">The time to calculate the motor force for.</param>
    </member>
    <member name="T:UnityEngine.SpringJoint2D">
      <summary>
        <para>Joint that attempts to keep two Rigidbody2D objects a set distance apart by applying a force between them.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SpringJoint2D.autoConfigureDistance">
      <summary>
        <para>Should the distance be calculated automatically?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SpringJoint2D.dampingRatio">
      <summary>
        <para>The amount by which the spring force is reduced in proportion to the movement speed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SpringJoint2D.distance">
      <summary>
        <para>The distance the spring will try to keep between the two objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SpringJoint2D.frequency">
      <summary>
        <para>The frequency at which the spring oscillates around the distance distance between the objects.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SurfaceEffector2D">
      <summary>
        <para>Applies tangent forces along the surfaces of colliders.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SurfaceEffector2D.forceScale">
      <summary>
        <para>The scale of the impulse force applied while attempting to reach the surface speed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SurfaceEffector2D.speed">
      <summary>
        <para>The speed to be maintained along the surface.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SurfaceEffector2D.speedVariation">
      <summary>
        <para>The speed variation (from zero to the variation) added to base speed to be applied.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SurfaceEffector2D.useBounce">
      <summary>
        <para>Should bounce be used for any contact with the surface?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SurfaceEffector2D.useContactForce">
      <summary>
        <para>Should the impulse force but applied to the contact point?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SurfaceEffector2D.useFriction">
      <summary>
        <para>Should friction be used for any contact with the surface?</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TargetJoint2D">
      <summary>
        <para>The joint attempts to move a Rigidbody2D to a specific target position.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TargetJoint2D.anchor">
      <summary>
        <para>The local-space anchor on the rigid-body the joint is attached to.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TargetJoint2D.autoConfigureTarget">
      <summary>
        <para>Should the target be calculated automatically?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TargetJoint2D.dampingRatio">
      <summary>
        <para>The amount by which the target spring force is reduced in proportion to the movement speed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TargetJoint2D.frequency">
      <summary>
        <para>The frequency at which the target spring oscillates around the target position.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TargetJoint2D.maxForce">
      <summary>
        <para>The maximum force that can be generated when trying to maintain the target joint constraint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TargetJoint2D.target">
      <summary>
        <para>The world-space position that the joint will attempt to move the body to.</para>
      </summary>
    </member>
    <member name="A:UnityEngine.Physics2DModule">
      <summary>
        <para>The Physics2d module implements 2D physics in Unity.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.WheelJoint2D">
      <summary>
        <para>The wheel joint allows the simulation of wheels by providing a constraining suspension motion with an optional motor.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelJoint2D.jointAngle">
      <summary>
        <para>The current joint angle (in degrees) defined as the relative angle between the two Rigidbody2D that the joint connects to.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelJoint2D.jointLinearSpeed">
      <summary>
        <para>The current joint linear speed in meters/sec.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelJoint2D.jointSpeed">
      <summary>
        <para>The current joint rotational speed in degrees/sec.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelJoint2D.jointTranslation">
      <summary>
        <para>The current joint translation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelJoint2D.motor">
      <summary>
        <para>Parameters for a motor force that is applied automatically to the Rigibody2D along the line.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelJoint2D.suspension">
      <summary>
        <para>Set the joint suspension configuration.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelJoint2D.useMotor">
      <summary>
        <para>Should a motor force be applied automatically to the Rigidbody2D?</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WheelJoint2D.GetMotorTorque(System.Single)">
      <summary>
        <para>Gets the motor torque of the joint given the specified timestep.</para>
      </summary>
      <param name="timeStep">The time to calculate the motor torque for.</param>
    </member>
  </members>
</doc>
